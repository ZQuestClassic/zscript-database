const int TEMPLINKSTATE_PRIORITIZE_LENGTH = 1; //If 1, temp Link state timers can't be set to a value lower than they already are
const int TEMPLINKSTATE_NOCOUNTDOWNSCROLL = 1; //If 1, counters don't count down when scrolling

const int TEMPLINKSTATE_BIG_LINK = 0; //0 for normal, 1 for 1x2, 2 for 2x2

int _TempLinkState[64];

//Global array indices, do not change
const int _TLSI_COLLDETTIMER   = 0;
const int _TLSI_INVISTIMER     = 1;
const int _TLSI_DRAWXTIMER     = 2;
const int _TLSI_DRAWXOLDSTATE  = 3;
const int _TLSI_DRAWYTIMER     = 4;
const int _TLSI_DRAWYOLDSTATE  = 5;
const int _TLSI_HITXTIMER      = 6;
const int _TLSI_HITXOLDSTATE   = 7;
const int _TLSI_HITYTIMER      = 8;
const int _TLSI_HITYOLDSTATE   = 9;
const int _TLSI_LTO            = 10;
const int _TLSI_LTOTIMER       = 11;
const int _TLSI_LTOHITFRAMES   = 14;
const int _TLSI_DIRTIMER       = 15;
const int _TLSI_DIR            = 16;

void TempLinkState_Init(){
	_TempLinkState[_TLSI_COLLDETTIMER] = 0;
	Link->CollDetection = true;
	_TempLinkState[_TLSI_INVISTIMER] = 0;
	Link->Invisible = false;
	_TempLinkState[_TLSI_DRAWXTIMER] = 0;
	_TempLinkState[_TLSI_DRAWYTIMER] = 0;
	_TempLinkState[_TLSI_HITXTIMER] = 0;
	_TempLinkState[_TLSI_HITYTIMER] = 0;
	_TempLinkState[_TLSI_LTOTIMER] = 0;
	Link->ScriptTile = 0;
	_TempLinkState[_TLSI_LTOHITFRAMES] = 0;
}

void TempLinkState_Update1(){
	//This doesn't do anything any more lol
}

void TempLinkState_Update2(){
	//Count down Link's hurt frames
	if(_TempLinkState[_TLSI_LTOHITFRAMES])
		--_TempLinkState[_TLSI_LTOHITFRAMES];
	//If hurt frames are 0 and he got hurt, set the hurt frames
	else if(Link->Action==LA_GOTHURTLAND||Link->Action==LA_GOTHURTWATER)
		_TempLinkState[_TLSI_LTOHITFRAMES] = 47;
	
	//Count down timer for Link Tile Override
	if(_TempLinkState[_TLSI_LTOTIMER]){
		if(!_TempLinkState_FreezeScrolling())
			--_TempLinkState[_TLSI_LTOTIMER];
		Link->ScriptTile = _TempLinkState[_TLSI_LTO];
		if(!_TempLinkState[_TLSI_LTOTIMER])
			Link->ScriptTile = 0;
	}
	
	//Count down timer for Link->CollDetection, default state is true
	if(_TempLinkState[_TLSI_COLLDETTIMER]){
		if(!_TempLinkState_FreezeScrolling())
			--_TempLinkState[_TLSI_COLLDETTIMER];
		if(!_TempLinkState[_TLSI_COLLDETTIMER])
			Link->CollDetection = true;
	}
	
	//Count down timer for Link->Invisible, default state is false
	if(_TempLinkState[_TLSI_INVISTIMER]){
		if(!_TempLinkState_FreezeScrolling())
			--_TempLinkState[_TLSI_INVISTIMER];
		if(!_TempLinkState[_TLSI_INVISTIMER])
			Link->Invisible = false;
	}
	
	//Count down timer for Link->DrawXOffset
	if(_TempLinkState[_TLSI_DRAWXTIMER]){
		if(!_TempLinkState_FreezeScrolling())
			--_TempLinkState[_TLSI_DRAWXTIMER];
		if(!_TempLinkState[_TLSI_DRAWXTIMER])
			Link->DrawXOffset = _TempLinkState[_TLSI_DRAWXOLDSTATE];
	}
	
	//Count down timer for Link->DrawYOffset
	if(_TempLinkState[_TLSI_DRAWYTIMER]){
		if(!_TempLinkState_FreezeScrolling())
			--_TempLinkState[_TLSI_DRAWYTIMER];
		if(!_TempLinkState[_TLSI_DRAWYTIMER])
			Link->DrawXOffset = _TempLinkState[_TLSI_DRAWYOLDSTATE];
	}
	
	//Count down timer for Link->HitXOffset
	if(_TempLinkState[_TLSI_HITXTIMER]){
		if(!_TempLinkState_FreezeScrolling())
			--_TempLinkState[_TLSI_HITXTIMER];
		if(!_TempLinkState[_TLSI_HITXTIMER])
			Link->HitXOffset = _TempLinkState[_TLSI_HITXOLDSTATE];
	}
	
	//Count down timer for Link->HitYOffset
	if(_TempLinkState[_TLSI_HITYTIMER]){
		if(!_TempLinkState_FreezeScrolling())
			--_TempLinkState[_TLSI_HITYTIMER];
		if(!_TempLinkState[_TLSI_HITYTIMER])
			Link->HitXOffset = _TempLinkState[_TLSI_HITYOLDSTATE];
	}
	
	//Count down timer for Link->Dir
	if(_TempLinkState[_TLSI_DIRTIMER]){
		if(!_TempLinkState_FreezeScrolling())
			Link->Dir = _TempLinkState[_TLSI_DIR];
		--_TempLinkState[_TLSI_DIRTIMER];
	}
}

global script TempLinkState_Example{
	void run(){
		TempLinkState_Init();
		while(true){
			TempLinkState_Update1(); 
			
			Waitdraw();
			
			TempLinkState_Update2(); //Recommended to place immediately before Waitframe()
			
			Waitframe();
		}
	}
}

//Makes Link invincible for the desired number of frames
void TempLinkState_UnsetCollDetection(int frames){
	++frames; //When frames hits 0 in the global script, changes get undone, so effectively 2==1
	if(frames > _TempLinkState[_TLSI_COLLDETTIMER] || !TEMPLINKSTATE_PRIORITIZE_LENGTH){
		Link->CollDetection = false;
		_TempLinkState[_TLSI_COLLDETTIMER] = frames;
	}
}
void TempLinkState_UnsetCollDetection(){
	TempLinkState_UnsetCollDetection(1);
}

//Sets Link invisible for the desired number of frames
void TempLinkState_SetInvisible(int frames){
	++frames; //When frames hits 0 in the global script, changes get undone, so effectively 2==1
	if(frames > _TempLinkState[_TLSI_INVISTIMER] || !TEMPLINKSTATE_PRIORITIZE_LENGTH){
		Link->Invisible = true;
		_TempLinkState[_TLSI_INVISTIMER] = frames;
	}
}
void TempLinkState_SetInvisible(){
	TempLinkState_SetInvisible(1);
}

//Sets Link's Draw X Offset for the desired number of frames
void TempLinkState_SetDrawXOffset(int offset, int frames){
	++frames; //When frames hits 0 in the global script, changes get undone, so effectively 2==1
	if(frames > _TempLinkState[_TLSI_DRAWXTIMER] || !TEMPLINKSTATE_PRIORITIZE_LENGTH){
		_TempLinkState[_TLSI_DRAWXTIMER] = frames;
		_TempLinkState[_TLSI_DRAWXOLDSTATE] = Link->DrawXOffset;
	}
	Link->DrawXOffset = offset;
}
void TempLinkState_SetDrawXOffset(int offset){
	TempLinkState_SetDrawXOffset(offset, 1);
}

//Sets Link's Draw Y Offset for the desired number of frames
void TempLinkState_SetDrawYOffset(int offset, int frames){
	++frames; //When frames hits 0 in the global script, changes get undone, so effectively 2==1
	if(frames > _TempLinkState[_TLSI_DRAWYTIMER] || !TEMPLINKSTATE_PRIORITIZE_LENGTH){
		_TempLinkState[_TLSI_DRAWYTIMER] = frames;
		_TempLinkState[_TLSI_DRAWYOLDSTATE] = Link->DrawYOffset;
	}
	Link->DrawYOffset = offset;
}
void TempLinkState_SetDrawYOffset(int offset){
	TempLinkState_SetDrawYOffset(offset, 1);
}

//Sets Link's Hit X Offset for the desired number of frames
void TempLinkState_SetHitXOffset(int offset, int frames){
	++frames; //When frames hits 0 in the global script, changes get undone, so effectively 2==1
	if(frames > _TempLinkState[_TLSI_HITXTIMER] || !TEMPLINKSTATE_PRIORITIZE_LENGTH){
		_TempLinkState[_TLSI_HITXTIMER] = frames;
		_TempLinkState[_TLSI_HITXOLDSTATE] = Link->HitXOffset;
	}
	Link->HitXOffset = offset;
}
void TempLinkState_SetHitXOffset(int offset){
	TempLinkState_SetHitXOffset(offset, 1);
}

//Sets Link's Hit Y Offset for the desired number of frames
void TempLinkState_SetHitYOffset(int offset, int frames){
	++frames; //When frames hits 0 in the global script, changes get undone, so effectively 2==1
	if(frames > _TempLinkState[_TLSI_HITYTIMER] || !TEMPLINKSTATE_PRIORITIZE_LENGTH){
		_TempLinkState[_TLSI_HITYTIMER] = frames;
		_TempLinkState[_TLSI_HITYOLDSTATE] = Link->HitYOffset;
	}
	Link->HitYOffset = offset;
}
void TempLinkState_SetHitYOffset(int offset){
	TempLinkState_SetHitYOffset(offset, 1);
}

//Sets Link's script tile for the desired number of frames
void TempLinkState_SetLinkTileOverride(int tile, int frames){
	++frames; //When frames hits 0 in the global script, changes get undone, so effectively 2==1
	Link->ScriptTile = tile;
	_TempLinkState[_TLSI_LTO] = tile;
	if(frames > _TempLinkState[_TLSI_LTOTIMER] || !TEMPLINKSTATE_PRIORITIZE_LENGTH){
		_TempLinkState[_TLSI_LTOTIMER] = frames;
	}
}
void TempLinkState_SetLinkTileOverride(int tile){
	TempLinkState_SetLinkTileOverride(tile, 1);
}

//Same as above
void TempLinkState_SetScriptTile(int tile, int frames){
	TempLinkState_SetLinkTileOverride(tile, frames);
}
void TempLinkState_SetScriptTile(int tile){
	TempLinkState_SetScriptTile(tile, 1);
}

//Sets Link's direction in the global script, preventing engine turning
void TempLinkState_SetDirOverride(int dir, int frames){
	_TempLinkState[_TLSI_DIR] = dir;
	_TempLinkState[_TLSI_DIRTIMER] = frames;
}
void TempLinkState_SetDirOverride(int dir){
	TempLinkState_SetDirOverride(dir, 1);
}

bool _TempLinkState_FreezeScrolling(){
	if(TEMPLINKSTATE_NOCOUNTDOWNSCROLL&&Link->Action==LA_SCROLLING)
		return true;
	return false;
}