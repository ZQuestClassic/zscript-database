{
  "name": "Solid FFCs/Sideview Moving Platforms",
  "author": "Moosh",
  "added": null,
  "updated": "16 Feb 2019",
  "tags": [
    "#FFC",
    "#Global"
  ],
  "rating": "2",
  "downloads": "50",
  "info": "This is a global script which adds solid FFCs which can also function as moving platforms in sideview.",
  "description": "Update 4/30/18: Turns out I overcompensated for the script's utility in sideview. They were killing Link's jump when he hits a \"ceiling\" in top-down. This has been fixed. I also fixed a bug where walking into the FFC could prevent it from crushing you.\nUpdate 2/15/19: Added jump-through platforms. Restructured some stuff to allow for additional flags in the future. This may require changing your FFC setups if you were using enemy pushing.\n\nThis is a global script which adds solid FFCs which can also function as moving platforms in sideview.\n\nIncluded with it are some FFC scripts for the following types of moving platforms:A moving platform that follows changers and FFC behavior. Can be used for a regular solid FFC in top-down.A moving platform that travels in a circular motion.A moving platform that only starts moving when Link steps on it.",
  "setup": "Constants:\nFirst, set the following constants in the script file to match the settings you want for your quest:\n\nCrush Settings:\nAll of these settings only apply if you're using the feature where FFCs pushing Link against each other or a solid wall can crush him. Skip them if you don't need that setting.SPR_LINKCRUSH: The sprite used for Link getting crushed. This is an animated sprite and can have either two or 8 states. Tiles for different states should be laid out in rows going down from the starting tile.SFX_LINKCRUSH: Sound when Link gets crushed.SFX_ENEMYCRUSH: Sound when an enemy gets crushed.DAMAGE_LINKCRUSH: How much HP getting crushed takes.DELAY_CRUSH: Delay in addition to the crush animation's duration before Link respawns after being crushed.\nOther Settings:SOLIDOBJ_MAX: The max number of solid objects active at once. This should be at least 32, but if you're using other scripts with solid behavior you can expand it. If this number is changed, you should also change the size of the SolidObjects[] array to 12+SOLIDOBJ_MAX*8.SOLIDOBJ_CRUSH_BEHAVIOR: Setting to enable crushing. If this is 0, Link can't be crushed. If this is 1, he'll be crushed and then teleport to the screen entrance. If this is 2, he'll be killed instantly. Hopefully if you're using setting 2, you'll use crushing objects sparingly.SOLIDOBJ_CRUSH_REPOSITION: If crush behavior is 1, this will determine whether or not Link teleports back to the screen entrance. If 0, he'll stay where he was when he got crushed. If 1, he'll teleport. Obviously don't use setting 0 if you have crushing FFCs that will stay in the crushing position permanently.SOLIDOBJ_COMPLEX_CRUSH_ANIM: If this is set to 1, the sprite set by SPR_LINKCRUSH will have 6 states based on how Link was crushed. Else it has two:If 6 States: Wall Crush (North), Wall Crush (South), Wall Crush (West), Wall Crush (East), FFC Crush (Vertical), FFC Crush (Horizontal)If 2 States: FFC Crush (Vertical), FFC Crush (Horizontal)SOLIDOBJ_PUSH_NPC: If this is set to 1, enemies can be pushed around by solid FFCs. This is a somewhat buggy feature that some of the default enemy classes will not cooperate with. There's still a secondary toggle for individual FFCs, but leaving this as 0 disables it universally. I'm mainly leaving this in with the idea that scripters can expand on it.SOLIDOBJ_CRUSH_SAFETY: This is a leniency setting for the crushing behavior. Link can be clipped this many pixels into an object before he gets crushed.SOLIDOBJ_LINKXTRIM / SOLIDOBJ_LINKYTRIM: More leniency settings, but these two apply to all solid FFCs in relation to Link's hitbox. This many pixels will be trimmed off the left/right and top (in sideview) of Link's hitbox.\nGlobal Script:\nNext, combine the global script. I have two example global scripts included with this one instead of the usual one because this script should be combined with the LinkMovement global script in a certain order. The SolidObjects_ functions need to run before the LinkMovement_ ones in the loop. Positioning of ghost.zh shouldn't particularly matter.\n\nFFC Scripts:\nThere are three FFC scripts included to make FFCs in your quest solid as well as having them behave as sideview platforms. An important note: If you're using especially fast moving platforms, change MAX_PUSH in LinkMovement.zh to accommodate for their top speeds. I set mine to 24.\n\nHere's the arguments for each:\n\nSolid_FFCD0: Width of the FFC's hitboxD1: Height of the FFC's hitboxD2: X offset of the FFC's hitboxD3: Y offset of the FFC's hitboxD4: Set the FFC's flags by adding these numbers together:1 - The FFC is only solid on the top, for sideview platforms2 - The FFC will push enemiesD5: If >0, the FFC's movement will mirror that of another FFC. This works like the \"Link to\" drop-down in the FFC editor, except it properly obeys the target FFC's A.Delay.D6: If >0, this specifies a combo that will disable the FFC's hitbox when it changes to it.\nMoving_Platform_Circular\nThis script uses the FFC's Combo W and Combo H to determine the hitbox instead of D0-3 like the first one.D0: Radius of the circular motion of the platformD1: Starting angle of the platformD2: Rotation speed of the platformD3: Set the FFC's flags by adding these numbers together:1 - The FFC is only solid on the top, for sideview platforms2 - The FFC will push enemies\nMoving_Platform_StepActivate\nThis script uses the FFC's Combo W and Combo H to determine the hitbox instead of D0-3 like the first one. The way the platform reacts once activated is set by X/Y Speed and Accel on the FFC.D0: Set this to the number of frames the FFC should shake for before activating (0 for not shake animation).D1: Set the FFC's flags by adding these numbers together:1 - The FFC is only solid on the top, for sideview platforms2 - The FFC will push enemies\nThe Feather Item Script:\nAny Roc's Feather class items should have FeatherAction placed in their active script slots. If you're using a global script for a jump button or another Roc's Feather active script, consult your local Moosh or other available scripter to combine them. This should be a simple task in most cases.\n\nFor Scripters:\nIf you want your scripts to use this solid FFC behavior, there's a simple function you can call. The script is not limited to just making FFCs solid.\n\nvoid SolidObjects_Add(int ID, int x, int y, int width, int height, int vX, int vY, int flags){\n\nHere's what each of the arguments do:ID: This is a number that should be unique to each platform object. IDs 1-32 are typically used by FFCs but you can use anything as long as it's unique from all other solid objects on the screen. Two of the same platform will produce glitchy behavior. If your object isn't a platform (lets Link jump off it, carries Link around based on its vX/vY) you can leave this at 0.x,y: Pretty self explanatory, the coordinates for the top left corner of the collision box.width,height: Width and height of the collision boxvX,vY: X and Y velocities of the collision box. If your object is a platform, this should be calculated based on difference in position each frame rather than how fast it's going. I had float imprecision issues when using direct velocity values. Even if the object isn't a platform, this is also used to determine if it can crush Link.flags: The sum of binary flags for the object's extra behaviors. See SFFCF_ constants.\nThis script requires std.zh, LinkMovement.zh, and ghost.zh.",
  "has_zip": true,
  "has_popup": true
}