const int SPR_DISAPPEAR = 93;//Sprite used for countdown lift desappearance.

const int TILE_COUNTDOWN_LIFT_SMALL = 14360;//Defaulr tile used for small lift.
const int TILE_COUNTDOWN_LIFT_LARGE = 14380; //Defaulr tile used for large lift.

//Yoshi Island Countdown Lift. You can jump on it limited amount of times. After that it disappears, falls, or explodes.
//Set up sequence of tiles showing lifts with numbers 9-0, including 2 frames of 0 flashing, when lift is about to explode.
//Set up combo 
//Place FFC with combo from step 2 script and "Run at Script Init" flag on.
//D0 - number of jumps allowed.
//D1 - lift type
//    0. Disappears on 0.
//    1. Falls on 0, crushing anyone beloy it.
//    2. Explodes on 0 with damage od D2, in 1/4ths of heart.
//D3 - Sound to play each time counter goes down.
//D3 - First tile in sequence you set up in step 1.
//D4 - fitsr in sequence used to render countdown lift
//D5 - solidity, 1 - top-solid, 2-fully solid 

ffc script CountdownLift{
	void run(int cd, int type, int value, int sound, int tile, int solidity){
		if (tile==0){
			if (this->TileWidth*this->TileHeight>1) tile = TILE_COUNTDOWN_LIFT_LARGE;
			else tile = TILE_COUNTDOWN_LIFT_SMALL;
		}
		SetSideviewFFCSolidity(this, solidity);
		this->Data = FFCS_INVISIBLE_COMBO;
		int warntimer = -1;
		while(true){
			if ((IsRidden(this))&&(warntimer<0)){
				if (this->InitD[7]==0){
					cd--;
					this->InitD[7]=1;
					Game->PlaySound(sound);
				}
				//LinkY+=4;
			}
			else if ((this->InitD[7]>0)&&(warntimer<0)){
				this->InitD[7]=0;
				if (cd==0){
					if (type==0){
						lweapon l = CreateLWeaponAt(LW_SPARKLE, CenterX(this)-8, CenterY(this)-8);
						l->UseSprite(SPR_DISAPPEAR);
						l->CollDetection=false;
						l->DeadState = Max(l->ASpeed*l->NumFrames-1, 1);
						SetSideviewFFCSolidity(this, 0);
						Quit();
					}
					if (type==1){
						Game->PlaySound(SFX_FALL);
						this->Ay = LINK_GRAV;
					}
					if (type==2){
						warntimer=60;
					}
				}
			}
			int offset = 9-cd;
			if (warntimer>=0){
				warntimer--;
				int b = warntimer%8;
				offset = 9 + Div(b,4);
				if (warntimer==0){
					eweapon boom;
					if (this->TileWidth*this->TileHeight == 1) boom = Screen->CreateEWeapon(EW_BOMBBLAST);
					else boom = Screen->CreateEWeapon(EW_SBOMBBLAST);
					boom->Damage = value;
					boom->X = CenterX(this)-8;
					boom->Y = CenterY(this)-8;
					SetSideviewFFCSolidity(this, 0);
					Quit();
				}
			}
			if (this->Y > 176){
				SetSideviewFFCSolidity(this, 0);
				Quit();
			}
			int dr = tile+offset*this->TileWidth;
			if (offset*this->TileWidth>=20)dr+=20;
			Screen->DrawTile(0, this->X, this->Y, dr, this->TileWidth, this->TileHeight, this->CSet, -1, -1, 0, 0, 0, 0, true, OP_OPAQUE);
			Waitframe();
		}
	}
}