// Sets solidity for given FFC.
//0 - none, 1 - solid-on-top, 2 - fully solid.   
void SetSideviewFFCSolidity(ffc f, int s){
	f->Misc[FFC_MISC_SOLIDITY] = s;
	f->Misc[FFC_MISC_ENEMY_SOLIDITY] = s;
}

// Same as above function, but can be set for either Link only or for enemy only. 
//FFC to FFC collision use FFC_MISC_SOLIDITY
//0 - none, 1 - solid-on-top, 2 - fully solid.   
void SetSideviewFFCSolidity(ffc f, int s, bool link, bool enemy){
	if (link)f->Misc[FFC_MISC_SOLIDITY] = s;
	if (enemy)f->Misc[FFC_MISC_ENEMY_SOLIDITY] = s;
}

//Gets solidity for given FFC.
//0 - none, 1 - solid-on-top, 2 - fully solid.  
int GetSideviewFFCSolidity(ffc f){
	return f->Misc[FFC_MISC_SOLIDITY];
}

//Gets solidity for given FFC.
//0 - none, 1 - solid-on-top, 2 - fully solid.
//if "enemy" boolean is set to true, this function will return solidity for enemies, otherwise returns solidity for Link.
int GetSideviewFFCSolidity(ffc f, bool enemy){
	if (enemy) return f->Misc[FFC_MISC_ENEMY_SOLIDITY];
	return f->Misc[FFC_MISC_SOLIDITY];
}

//Returns true if Link rides this FFC.
bool IsRidden(ffc f){
	if (LinkMode != LINK_MODE_ONPLATFORM) return false;
	if (RidingFFCID != FFCNum(f)) return false;
	return true;
}

//retuens true if the given FFC is pushed in the given direction
bool IsPushed(ffc f, int dir){
	if (f->Misc[FFC_MISC_SOLIDITY]==0) return false;
	if (f->Misc[FFC_MISC_SOLIDITY]==1){
		if (dir==DIR_DOWN){
			if ((LinkY+ 16 == f->Y)&&(Link->InputDown)) return true;
			else return false;
		}
		else return false;
	}
	if (dir==DIR_DOWN){
		if ((LinkY+ 16 == f->Y)&&(Link->InputDown)) return true;
		else return false;
	}
	if (dir==DIR_UP){
		if ((LinkY == f->Y + f->EffectHeight)&&(Link->InputUp)) return true;
		else return false;
	}
	if (dir==DIR_LEFT){
		if ((LinkX == f->X + f->EffectWidth)&&(Link->InputLeft)) return true;
		else return false;
	}
	if (dir==DIR_RIGHT){
		if ((LinkX+16 == f->X)&&(Link->InputRight)) return true;
		else return false;
	}
}

//Crushes Link immediately. Use this, if velocity of solid FFC can exceed 7-8 to avoid clipping through solid combos.
void HardCrush(int damage, int dir){
	if (LinkCrushTimer<0) return;
	Link->HP -= damage;
	Game->PlaySound(SFX_OUCH);
	Game->PlaySound(SFX_CRUSH);
	LinkCrushAnim(dir);
	Link->Action = LA_NONE;
	Link->Invisible = true;
	Link->CollDetection = false;
	RidingFFCXOffset = 0;
	RidingFFCID=0;
	LinkCrushTimer = -61;
	LinkVx=0;
	LinkVy=0;
	StairMode = STAIR_NONE;
	LinkMode = LINK_MODE_CRUSHED;
}

//Returns Link`s horizontal velocity in previous frame.
int GetLinkVx(){
	return Link->X-OldLinkX;
}

//Returns Link`s vertical velocity in previous frame.
int GetLinkVy(){
	return Link->Y-OldLinkY;
}

//Similar to CanWalk, but also pays attention to solid combos
bool GSD_CanWalk(ffc f, int x, int y, int dir, int step, bool full_tile) {
	int COLLPOINTSX[3];
	int COLLPOINTSY[3];
	int xx = x+15;
   	int yy = y+15;
	if (dir == DIR_UP){
		COLLPOINTSX[0] = x;
		COLLPOINTSX[1] = x+8;
		COLLPOINTSX[2] = x+15;
		for (int i = 0; i<3; i++) COLLPOINTSY[i] = y-step;
	}
	if (dir == DIR_DOWN){
		COLLPOINTSX[0] = x;
		COLLPOINTSX[1] = x+8;
		COLLPOINTSX[2] = x+15;
		for (int i = 0; i<3; i++) COLLPOINTSY[i] = yy+step;
	}
	if (dir == DIR_LEFT){
		COLLPOINTSY[0] = y;
		COLLPOINTSY[1] = y+8;
		COLLPOINTSY[2] = y+15;
		for (int i = 0; i<3; i++) COLLPOINTSX[i] = x-step;
	}
	if (dir == DIR_RIGHT){
		COLLPOINTSY[0] = y;
		COLLPOINTSY[1] = y+8;
		COLLPOINTSY[2] = y+15;
		for (int i = 0; i<3; i++) COLLPOINTSX[i] = xx+step;
	}
	for (int i = 0; i<3; i++){
		if (Ghost_WithinSolidFFC(f, COLLPOINTSX[i], COLLPOINTSY[i])) return false;
	}
    int c=8;    
    if(full_tile) c=0;
    if(dir==0) return !(y-step<0||Screen->isSolid(x,y+c-step)||Screen->isSolid(x+8,y+c-step)||Screen->isSolid(xx,y+c-step));
    else if(dir==1) return !(yy+step>=176||Screen->isSolid(x,yy+step)||Screen->isSolid(x+8,yy+step)||Screen->isSolid(xx,yy+step));
    else if(dir==2) return !(x-step<0||Screen->isSolid(x-step,y+c)||Screen->isSolid(x-step,y+c+7)||Screen->isSolid(x-step,yy));
    else if(dir==3) return !(xx+step>=256||Screen->isSolid(xx+step,y+c)||Screen->isSolid(xx+step,y+c+7)||Screen->isSolid(xx+step,yy));
    return false; //invalid direction
}

//Returns ID of FFC that is on this FFC, or 0, if none
int IsPressed(ffc f, int scr){
	for (int i=1; i<32;i++){
		ffc p = Screen->LoadFFC(i);
		if (p->Script!=scr) continue;
		if ((f->Misc[FFC_MISC_SOLIDITY] == 0)&&(Collision(f,p)))return i;
		if (p->X+p->EffectWidth-1 < f->X) continue;
		if ((p->X)>(f->X + f->EffectWidth-1))continue;
		if (Screen->isSolid(p->X, p->Y+p->EffectHeight)) continue;
		if (Screen->isSolid(p->X+p->EffectWidth-1, p->Y+p->EffectHeight)) continue;
		if (Screen->isSolid(p->X+p->EffectWidth/2-1, p->Y+p->EffectHeight)) continue;
		if (p->Y+p->EffectHeight < f->Y) continue;
		return i;
	}
	return 0;
}