const int CMB_SIDEVIEW_DOOR_WARPSET = 1024;

//Sideview signboard. A to read.
//D0 - String to display.
ffc script SideviewSignboard{
	void run (int string){
		while (true){
			if (Link->PressA){
				if (LinkCollision(this)){
					Link->Dir=DIR_UP; 
					Screen->Message(string);
				}
			}
			Waitframe();
		}
	}
}

//Sideview door. Press Up to enter. Can be locked by any type of lock, including secret-operated one.
//1. Set up 4 consecutive invisible Senditive Warp comboc A-D
//2. Set CMB_SIDEVIEW_DOOR_WARPSET constant to 1st combo from step 1.
//3. Import and compile the script.
//4. Place the door FFC with script assigned.
//    D0 - warp A-D
//    D1 - lock type. 
//     0 - none, 1 normal key, 2 - boss key, 3 - trigger secrets to open.
//5. Set flag "Run script at Screen Init".  
ffc script SideviewDoor{
	void run(int warp, int lock){
		int tolerance= this->TileWidth*8;
		int level = Game->GetCurLevel();
		bool unlock = false;
		bool silent = false;
		if ((lock == 1)&&(Screen->State[ST_LOCKBLOCK])){
			silent = true;
			unlock = true;
		}
		else if ((lock == 2)&&(Screen->State[ST_BOSSLOCKBLOCK])){
			silent = true;
			unlock = true;
		}
		else if ((lock == 3)&&(Screen->State[ST_SECRET])){
			silent = true;
			unlock = true;
		}
		else if ((lock == 0)&&(Screen->State[ST_DOORUP])) unlock = true;
		if (unlock) this->Data++;
		while(true){
			if ((lock == 3)&&(Screen->State[ST_SECRET])&&(!unlock)){
				if (!silent)Game->PlaySound(SFX_SHUTTER);
				unlock = true;
				this->Data++;
			}
			if ((lock==1)&&(!unlock)){
				bool key = false;
				if (Link->Item[I_MAGICKEY]) key = true;
				if (Game->LKeys[level]>0) key = true;
				if (key){
					unlock = true;
				}
			}
			if ((lock==2)&&((Game->LItems[level]&LI_BOSSKEY) >0)&&(!unlock)){
				unlock = true;
			}
			if ((lock==0)&&(!unlock)){				
				unlock = true;
			}
			if ((unlock)&&(Link->PressUp)){
				if (((Abs(CenterLinkX()) - CenterX(this))< tolerance)&&(LinkCollision(this))&&(Link->InputUp)){
					if (!silent)Game->PlaySound(SFX_SHUTTER);
					if ((!Link->Item[I_MAGICKEY])&&(lock==1))Game->LKeys[level]--;
					if (lock==0) Screen->State[ST_DOORUP] = true;
					else if (lock==1)Screen->State[ST_LOCKBLOCK] = true;
					else if (lock==2) Screen->State[ST_BOSSLOCKBLOCK] = true;
					Link->Dir==DIR_UP;
					this->Data= CMB_SIDEVIEW_DOOR_WARPSET+warp;
				}
			}    
		Waitframe();
		}
	}
}

//Sideview Treasure Chest. Press A to open and clain contents. Can be locked by any type of lock, including secret-operated one.
//1. Import and compile the script.
//2. Place the door FFC with script assigned.
//    D0 - ID of item inside the chest.
//    D1 - lock type. 
//     0 - none, 1 normal key, 2 - boss key, 3 - trigger secrets to open.
//3. Set flag "Run script at Screen Init".  
ffc script SideviewTreasureChest{
	void run(int itm, int lock){
		if (Screen->State[ST_SPECIALITEM]){
			this->Data++;
			Quit();
		}
		int tolerance= this->TileWidth*8;
		int level = Game->GetCurLevel();
		bool unlock = false;
		bool silent = false;
		if ((lock == 1)&&(Screen->State[ST_LOCKEDCHEST])) unlock = true;
		else if ((lock == 2)&&(Screen->State[ST_BOSSCHEST])) unlock = true;
		else if ((lock == 3)&&(Screen->State[ST_SECRET])){
			silent = true;
			unlock = true;
		}
		while(true){
			if ((lock == 3)&&(Screen->State[ST_SECRET])){
				unlock = true;
			}
			if ((lock==1)){
				bool key = false;
				if (Link->Item[I_MAGICKEY]) key = true;
				if (Game->LKeys[level]>0) key = true;
				if (key){
					unlock = true;
				}
			}
			if ((lock==2)&&((Game->LItems[level]&LI_BOSSKEY) >0)){
				unlock = true;
			}
			if ((lock==0)){				
				unlock = true;
			}
			if (unlock){
				if ((((Abs(CenterLinkX()) - CenterX(this))< tolerance)&&(LinkCollision(this))&&(Link->PressA))||(lock==3)){
					if (!silent)Game->PlaySound(SFX_SHUTTER);
					if ((!Link->Item[I_MAGICKEY])&&(lock==1))Game->LKeys[level]--;
					if (lock==0) Screen->State[ST_CHEST] = true;
					else if (lock==1)Screen->State[ST_LOCKEDCHEST] = true;
					else if (lock==2) Screen->State[ST_BOSSCHEST] = true;
					item p = Screen->CreateItem(itm);
					p->X = CenterX(this) - p->HitWidth/2;
					p->Y = this->Y;
					p->Pickup = 0x802;
					this->Data++;
					Quit();
				}
			}
			//debugValue(4, unlock);
			Waitframe();
		}
	}
}