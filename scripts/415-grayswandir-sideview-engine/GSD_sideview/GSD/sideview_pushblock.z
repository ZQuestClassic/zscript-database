const int SFX_SIDEVIEW_PUSHBLOCK_FALL = 38; //Sound to play when sideview pushable block falls off ledge.
const int SFX_SIDEVIEW_PUSHBLOCK_CRASH = 3; //Sound to play when sideview pushable block hits ground while falling.

const int I_SIDEVIEW_PUSHBLOCK_STACKPUSH = 56;// Item needed to allow pushing several blocks at once.

const int SIDEVIEW_PUSHBLOCK_PUSHSPEED = 1;//Link`s pushing speed, in pixels per frame. Recommended range 0 - 1.

//Sideview stacking stack-push block.
//D0 - weight.
//D1 - pushspeed. If stack of blocks with different D1 id pushed, slowest one is used.
//D2 - Set to 1, and block will be able to float in water
//Rest of D inputs must be 0.

ffc script SideviewPushblock{
	void run(int weight, int pushspeed, int floating){
		SetSideviewFFCSolidity(this, BLOCK_HARD);
		if (pushspeed==0){
			pushspeed = SIDEVIEW_PUSHBLOCK_PUSHSPEED;
			this->InitD[1] = SIDEVIEW_PUSHBLOCK_PUSHSPEED;
		}
		int power = GetCurrentItem(IC_BRACELET);
		if (power == -1) this->InitD[7] = 0;
		else {
			itemdata it = Game->LoadItemData(power);
			this->InitD[7] = it->Power;
		}
		while (true){
			if (SideviewBlockIsPushed(this, Link->Dir)){
				pushspeed = this->InitD[1];
				pushspeed = SideviewBlockCanBePushed (this, Link->Dir, weight, false, pushspeed);
				if (pushspeed>0){
					if (this->InitD[4]==0) Game->PlaySound(50);
					if (Link->Dir == DIR_LEFT){
						this->X-=pushspeed;
						LinkX = this->X + this->EffectWidth;
						if((this->InitD[6]<0)&&(this->Vx>0))this->Vx=0;
					}
					else if (Link->Dir == DIR_RIGHT){
						this->X+=pushspeed;
						LinkX = this->X-16;
						if((this->InitD[6]<0)&&(this->Vx<0))this->Vx=0;
					}
					if (LinkMode == LINK_MODE_ONPLATFORM){
						ffc rd = Screen->LoadFFC(RidingFFCID);
						RidingFFCXOffset = LinkX - rd->X;
					}
					FFCHorizWallCollisionUpdate(this, Link->Dir);
					if (this->InitD[6]>0){
						ffc ride = Screen->LoadFFC(this->InitD[6]);
						this->InitD[5] = this->X - ride->X;
					}
					this->InitD[4] =1;
				}
			}
			else this->InitD[4] = 0;
			ProcessPhysics(this);
			if ((this->Y > 176)||(this->X<-(this->EffectWidth)||(this->X>256))){//Pushblock has fallen into deep dark chasm below existence.
				ClearFFC(FFCNum(this));
				Quit();
			}
			Waitframe();
		}
	}
}

bool SideviewBlockIsPushed(ffc f, int dir){
	if (LinkMode==LINK_MODE_CRUSHED) return false;
	if (dir == DIR_UP) return false;
	if (dir== DIR_DOWN) return false;
	if (dir == DIR_LEFT){
		if (!Link->InputLeft) return false;
		if (LinkX != f->X + f->EffectWidth) return false;
		if ((LinkY+14 > f->Y)&&((LinkY+14)<(f->Y+f->EffectHeight))) return true;
		return false;
	}
	if (dir == DIR_RIGHT){
		if (!Link->InputRight) return false;
		if (LinkX != f->X-16)return false;
		if ((LinkY+14 > f->Y)&&((LinkY+14)<(f->Y+f->EffectHeight))) return true;
		return false;
	}
}

int SideviewBlockCanBePushed (ffc f, int dir, int weight, bool stackpush, int pushspeed){
	if (f->Vy != 0)return 0;
	if ((stackpush)&&(!Link->Item[I_SIDEVIEW_PUSHBLOCK_STACKPUSH])) return 0;
	int power = f->InitD[7];
	if (power == -1) f->InitD[7];
	if (power< weight) return 0;
	int str[] = "SideviewPushblock";
	int scr = Game->GetFFCScript(str);
	if ((f->Script)!=scr) return 0;
	for (int i=f->TileHeight*2; i>=0; i--){
		int CollpointX = f->X-1;		
		if (dir==DIR_RIGHT) CollpointX = f->X + f->EffectWidth; 
		int CollpointsY = f->Y+(8*i);
		if (i>1)CollpointsY--;
		else CollpointsY++;
		//Screen->PutPixel(7, CollpointX, CollpointsY, 0x93, 0, 0, 0, OP_OPAQUE);
		if (GetBlockType(CollpointX, CollpointsY) == BLOCK_HARD) return 0;
		int cmb = ComboAt(CollpointX, CollpointsY);
		if (ComboFI(cmb, 67)) return 0;
		//Check stack pushable FFC
	}
	
	int pushed[33];
	pushed[0]=0;
	
	for (int i=1; i<=32;i++){
		ffc p=Screen->LoadFFC(i);
		if (f->Misc[FFC_MISC_SOLIDITY]==BLOCK_EMPTY){
			pushed[i]=0;
			continue;
		}
		if (f==p){
			pushed[i]=0;
			continue;
		}
		if (p->InitD[4] ==1){
			pushed[i]=0;
			continue;
		}
		if (GetSideviewFFCSolidity(p) <2){
			pushed[i]=0;
			continue;
		}
		if (dir==DIR_LEFT){
			//Screen->Rectangle(5, f->X-1, f->Y, f->X, f->Y+f->EffectHeight-1, 1, -1, 0, 0, 0, true, OP_OPAQUE);
			if (!RectCollision(p->X, p->Y, p->X+p->EffectWidth-1, p->Y+p->EffectHeight-1, f->X-1, f->Y, f->X, f->Y+f->EffectHeight-1)){
				pushed[i]=0;
				continue;
			}
			else{
				pushspeed = SideviewBlockCanBePushed (p, dir, weight+(p->InitD[0]), true, pushspeed);
				if (pushspeed==0) return 0;
				if(!RidingOnPushblock(p))pushspeed = Min(pushspeed, p->InitD[1]);
				pushed[i]=1;
				continue;
			}
		}
		if (dir==DIR_RIGHT){
			//Screen->Rectangle(5, f->X+f->EffectWidth-1,f->Y, f->X+f->EffectWidth, f->Y+f->EffectHeight-1, 1, -1, 0, 0, 0, true, OP_OPAQUE);
			if (!RectCollision(p->X, p->Y, p->X+p->EffectWidth-1, p->Y+p->EffectHeight-1, f->X+f->EffectWidth-1, f->Y, f->X+f->EffectWidth, f->Y+f->EffectHeight-1)){
				pushed[i]=0;
				continue;
			}
			else{
				pushspeed = SideviewBlockCanBePushed (p, dir, weight+(p->InitD[0]), true, pushspeed);
				if (pushspeed==0) return 0;
				if(!RidingOnPushblock(p))pushspeed = Min(pushspeed, p->InitD[1]);
				pushed[i]=1;
				continue;
			}
		}			
	}
	if (pushspeed==0){
		Game->PlaySound(16);
		return 0;
	}
	for (int i=1; i<=32;i++){
		ffc p=Screen->LoadFFC(i);
		if (pushed[i]>0){
			if (dir==DIR_LEFT) p->X-=pushspeed;
			if (dir==DIR_RIGHT) p->X+=pushspeed;
			p->InitD[4] =1;
		}
	}
	return pushspeed;
}

void ProcessPhysics(ffc f){
	int BlockBlock = BLOCK_EMPTY;	
	
	if (f->InitD[6]==0){//Conveyors
		int conveyor = 0;
		for (int i=0; i<=f->TileWidth*2; i++){
			int CollpointY = f->Y + f->EffectHeight;
			int CollpointsX = f->X+(8*i);
			if (i>0) CollpointsX--;			
			int cmb = ComboAt(CollpointsX, CollpointY);
			if (Screen->ComboT[cmb]==CT_CVLEFT) conveyor--;
			if (Screen->ComboT[cmb]==CT_CVRIGHT) conveyor++;
			
		}
		f->X += Sign(conveyor);	
	}
	
	else if (f->InitD[6]>0){//Riding on other solid FFCs
		ffc Ride = Screen->LoadFFC(f->InitD[6]);
		if (GetSideviewFFCSolidity(Ride)>0){
			f->X = Ride->X + f->InitD[5];
			f->Y = Ride->Y - f->EffectHeight;
		}
	}
	
	if (f->InitD[6]==0){
		
		for (int i=0; i<=f->TileWidth*2; i++){//Determine block type underneath block
			int CollpointY = f->Y + f->EffectHeight;
			int CollpointsX = f->X+(8*i);
			if (i>0) CollpointsX--;
			int newblock = GetBlockType(CollpointsX, CollpointY);
			if (newblock > BlockBlock) BlockBlock = newblock;
		}
		
		if (BlockBlock == BLOCK_EMPTY){//General falling
			if (f->Vy==0){//Play fall sound
				bool sound=true;
				int cmb1 = ComboAt(f->X, f->Y+f->EffectHeight+3);
				int cmb2 = ComboAt(f->X+f->EffectWidth-1, f->Y+f->EffectHeight+3);
				if (Screen->isSolid(f->X, f->Y+f->EffectHeight+3)) sound=false;
				else if(Screen->isSolid(f->X+f->EffectWidth-1, f->Y+f->EffectHeight+3)) sound=false;
				else	if (WithinSolidFFC(f->X, f->Y+f->EffectHeight+3))sound=false;
				else	if(WithinSolidFFC(f->X+f->EffectWidth-1, f->Y+f->EffectHeight+3)) sound=false;
				if (sound)Game->PlaySound(SFX_SIDEVIEW_PUSHBLOCK_FALL);
			}
			
			if (f->InitD[2]>0){//falling into water.
				int cmb = ComboAt(CenterX(f), CenterY(f));
				if (Screen->ComboT[cmb]==CT_SIDEVIEW_WATER){
					Game->PlaySound(SFX_SIDEVIEW_SPLASH);
					f->InitD[6]=-1;
					f->InitD[5]=0;
					f->Vy=0;
					if (Screen->isSolid(f->X-1, CenterY(f))) f->Vx = f->InitD[1];
					else if (Screen->isSolid(f->X-1, CenterY(f)-1)) f->Vx = f->InitD[1];
					else if (WithinSolidFFC(f->X-1, CenterY(f)+1)) f->Vx = f->InitD[1];
					if (Screen->isSolid(f->X + f->EffectWidth, CenterY(f))) f->Vx = -f->InitD[1];
					else if (Screen->isSolid(f->X + f->EffectWidth, CenterY(f)-1)) f->Vx = -f->InitD[1];
					else if (WithinSolidFFC(f->X + f->EffectWidth, CenterY(f)+1)) f->Vx = -f->InitD[1];
				}
			}
			for (int i=0; i<=f->TileWidth*2; i++){//Landing on solid FFC
				int CollpointY = f->Y + f->EffectHeight;
				int CollpointsX = f->X+(8*i);
				if (i>0) CollpointsX--;
				int rd = GetFFCColliding(CollpointsX, CollpointY, true);
				if (rd==0) continue;
				ffc r = Screen->LoadFFC(rd);
				if (f==r)continue;
				if (r->Vy >0) continue;
				if (r->Y > (f->Y+ f->EffectHeight +8)) continue;
				if (f->Vy > 0.5) Game->PlaySound(SFX_SIDEVIEW_PUSHBLOCK_CRASH);
				if(f->InitD[6]<0)f->Vx=0;
				f->InitD[6]=rd;
				f->InitD[5]=f->X- r->X;
				f->Y = r->Y - f->EffectHeight;
				f->Vy=0;
				break;
			}
			
			if (f->InitD[6]==0)f->Vy = Min(f->Vy + LINK_GRAV, 2);
		}
		
		else if (f->Vy>0){//Landing on solid ground
			if (f->InitD[6]==0)f->Y++;
			if (f->InitD[6]==0)f->Y &= 0x1FFF8;		
			if (f->Vy > 0.5) Game->PlaySound(SFX_SIDEVIEW_PUSHBLOCK_CRASH);
			f->Vy=0;
		}
	}	
	
	FFCHorizWallCollisionUpdate(f, DIR_RIGHT);//Horizontal wall collision
	FFCHorizWallCollisionUpdate(f, DIR_LEFT);
	
	bool falloff = false;//Falling off water and solid FFCs.
	if (f->InitD[6]!=0){
		if (f->InitD[6]>0){
			ffc riding =  Screen->LoadFFC(f->InitD[6]);
			int rideleft = ((f->EffectWidth)*-1)+1;
			int rideright = riding->EffectWidth-1;
			if (f->InitD[5]<=rideleft) falloff=true;
			if (f->InitD[5]>=rideright) falloff=true;
			if (riding->Misc[FFC_MISC_SOLIDITY]==0)	falloff=true;
			if (riding->Vy>0) falloff=true;
		}
		else if (f->InitD[6]<0){
			int cmb1 = ComboAt(f->X, f->Y+f->EffectHeight);
			int cmb2 = ComboAt(f->X+f->EffectWidth-1, f->Y+f->EffectHeight);
			if ((Screen->ComboT[cmb1]!=CT_SIDEVIEW_WATER)&&(Screen->ComboT[cmb2]!=CT_SIDEVIEW_WATER)) falloff=true;
		}
		if (falloff){
			f->InitD[6]=0;
			f->InitD[5]=0;
		}
	}
	
	
}

bool RidingOnPushblock(ffc f){
	if (f->InitD[6]<=0)return false;
	ffc r = Screen->LoadFFC(f->InitD[6]);
	int str[] = "SideviewPushblock";
	int scr = Game->GetFFCScript(str);
	if (f->Script==scr) return true;
	return false;
}

void FFCHorizWallCollisionUpdate(ffc f, int dir){
	for (int i=f->TileHeight*2; i>=0; i--){
		int CollpointX = f->X;		
		if (dir==DIR_RIGHT) CollpointX = f->X + f->EffectWidth-1; 
		int CollpointsY = f->Y+(8*i);
		if (i>1)CollpointsY--;
		else CollpointsY+=2;
		//Screen->PutPixel(7, CollpointX, CollpointsY, 0x81, 0, 0, 0, OP_OPAQUE);
		int cmb = ComboAt(CollpointX, CollpointsY);
		if ((GetBlockType(CollpointX, CollpointsY) == BLOCK_HARD)|| 
		(ComboFI(cmb, 67))){
			if (CollpointX > f->X) f->X = ComboX(cmb)-f->EffectWidth;
		 	else f->X = ComboX(cmb)+16;
		 	f->Vx=0;
			if (f->InitD[6]>0){
				ffc ride = Screen->LoadFFC(f->InitD[6]);
				f->InitD[5] = f->X - ride->X;
			}
		}
		if (dir==DIR_RIGHT) CollpointX ++;
		else CollpointX--;
		int stackpushFFC = GetFFCColliding(CollpointX, CollpointsY, false);
		if (stackpushFFC==0) continue;
		if (stackpushFFC == f->InitD[6]) continue;
		ffc stackedpushblock = Screen->LoadFFC(stackpushFFC);
		if (stackedpushblock == f ) continue;
		if (dir == DIR_LEFT){
			f->X = stackedpushblock->X + stackedpushblock->EffectWidth;
			if((f->InitD[6]<0)&&(f->Vx<0))f->Vx=0;
		}
		else if (dir == DIR_RIGHT){
			f->X =  stackedpushblock->X - f->EffectWidth;
			if((f->InitD[6]<0)&&(f->Vx>0))f->Vx=0;
		}
		if (f->InitD[6]>0){
			ffc ride = Screen->LoadFFC(f->InitD[6]);
			f->InitD[5] = f->X - ride->X;
		}
	}
}


//void pushblockdebug(ffc f){
//	if (f->InitD[6]>0) f->CSet = 8;
//	else f->CSet=2;
//}

//Drop all pushblocks off bottom of the screen for secrets.
ffc script StrongmanTrashCleaningPuzzle{
	void run(){
		int str[] = "SideviewPushblock";
		int scr = Game->GetFFCScript(str);
		while(true){
			int numblocks = 0;
			for (int i=1; i<=32; i++){
				ffc f = Screen->LoadFFC(i);
				if (f->Script == scr) numblocks++;
			}
			if (numblocks==0){
				Game->PlaySound(SFX_SECRET);
				Screen->TriggerSecrets();
				Screen->State[ST_SECRET]= true;
				Quit();
			}
			Waitframe();
		}
	}
}


//Sideview button. can be pressed by jumping on it and putting pushblock on it. All of them must be pressed to trigger secrets.
//Set up 2 consequtive combos, 1 for idle, 1 for pressed. make sure that bottom 4 rowa of pixels are unused
//Place FFC with 1st combo from step 1
//D0 - OR together: 1- Link can press button, 2 - Pushblocks can press button.
//D1 - IF set to >0, it stays pressed when released.
//D2 - sound to play on button press.
//D3 - solidity
ffc script SideviewButton{
	void run(int flags, int press, int sound, int solidity){
		SetSideviewFFCSolidity(this, solidity);
		int origdata = this->Data;
		int origY = this->Y;
		int origHy = this->EffectHeight;
		int str[] = "SideviewPushblock";
		int hitbox[4] = {LinkX, LinkY, LinkX+15, LinkY+15};
		int scr = Game->GetFFCScript(str);
		int FFCID = FFCNum(this);
		while(true){
			if (((flags&1)>0)&&(IsRidden(this))&&(!Screen->isSolid(LinkX, LinkY+16))&&(!Screen->isSolid(LinkX+15, LinkY+16))){
				if (this->InitD[7]==0) Game->PlaySound(sound);
				if (solidity>0){
					this->Y = origY + 4;
					this->EffectHeight=origHy-4;
				}
				this->InitD[7]=1;
				this->Data=origdata+1;
				//LinkY+=4;
			}
			else if (((flags&1)>0)&&(GetSideviewFFCSolidity(this)==0)&&(RectCollision(LinkX, LinkY, LinkX+15, LinkY+15, this->X, this->Y, this->X + this->EffectWidth-1, this->Y + this->EffectHeight-1))){
				if (this->InitD[7]==0) Game->PlaySound(sound);
				this->InitD[7]=1;
				this->Data=origdata+1;
			}
			else if (((flags&2)>0)&&(this->InitD[7]==0)){
				int pr = IsPressed(this, scr);
				if (pr>0){
					ffc f  = Screen->LoadFFC(pr);
					int rd = f->InitD[6];
					bool pressing = false;
					if (rd==0) pressing = true;
					if (rd==FFCID)pressing = true;
					if (pressing){
						if (this->InitD[7]==0) Game->PlaySound(sound);
						if (solidity>0){
							this->Y = origY + 4;
							this->EffectHeight=origHy-4;
							ffc p = Screen->LoadFFC(pr);
							p->Y = this->Y - p->EffectHeight;
						}
						this->InitD[7]=1;
						this->Data=origdata+1;
					}					
				}
			}
			else if ((press==0)&&(this->InitD[7]>0)&&(IsPressed(this, scr)==0)){
				this->InitD[7]=0;
				this->Data=origdata;
				this->Y = origY;
				this->EffectHeight = origHy;
			}
			int str2[] = "SideviewButton";
			int scr2 = Game->GetFFCScript(str2);
			for (int i=1;i<=33;i++){
				if (Screen->State[ST_SECRET]) break;
				if (i>=33){
					Game->PlaySound(SFX_SECRET);
					Screen->TriggerSecrets();
					Screen->State[ST_SECRET]=true;
					break;
				}
				ffc s = Screen->LoadFFC(i);
				if (s->Script!=scr2) continue;
				if (s->InitD[7]==0)	break;
				if (i>=32){
					Game->PlaySound(SFX_SECRET);
					Screen->TriggerSecrets();
					Screen->State[ST_SECRET]=true;
				}
			}
			Waitframe();
		}
	}
}

//Transforms FFC into pushable block, inhereting data, size and CSet 
//with given weight (bracelet level needed to push), push speed and buoyancy. 
void TransformIntoPushblock(ffc g, int weight, int pushspeed, int floating){
	SetSideviewFFCSolidity(g, 0);
	int str[]="SideviewPushblock";
	int scr = Game->GetFFCScript(str);
	int args[8] = {weight,pushspeed,floating,0,0,0,0,0};
	ffc f = RunFFCScriptOrQuit(scr, args);
	f->Data = g->Data;
	f->X = g->X;
	f->Y = g->Y;
	f->EffectWidth = g->EffectWidth;
	f->EffectHeight = g->EffectHeight;
	f->TileWidth = g->TileWidth;
	f->TileHeight = g->TileHeight;
	f->CSet = g->CSet;
	ClearFFC(FFCNum(g));
	LinkPlatformFallOff();
	Quit();
}