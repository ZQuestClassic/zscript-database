// import "std.zh"
// import "string.zh"
// import "ghost.zh"

const int SPUME_SAFE_DIST = 48; // How far Link has to be before it'll come out
const int SPUME_FIRE_RATE_MIN = 60; // Minimum time between shots
const int SPUME_FIRE_RATE_MAX = 150; // Maximum time between shots
const int SPUME_PROJ_STEP = 200; // EWeapon speed
const int SPUME_CHARGE_TIME = 30; // Time to charge before firing
const int SPUME_FIRE_TIME = 15; // Time to remain in firing pose
const int SPUME_EWEAPON = 31; // Type of weapon to fire (EW constant)
const int SPUME_IC_SHIELD = 12; // Shield item class; you'll probably need to
                                // change this if using a GB-style shield

// npc->Attributes[] indices
const int SPUME_ATTR_SPAWN_TYPE = 0;
const int SPUME_ATTR_SPAWN_FLAG = 1;
const int SPUME_ATTR_SHIELD_LEVEL = 2;
const int SPUME_ATTR_PROJ_ARC = 3;
const int SPUME_ATTR_PROJ_SPRITE = 4;
const int SPUME_ATTR_PROJ_TRANS = 5;
const int SPUME_ATTR_CHARGE_SOUND = 6;
const int SPUME_ATTR_PROJ_SOUND = 7;
const int SPUME_ATTR_EMERGE_SOUND = 8;
const int SPUME_ATTR_SUBMERGE_SOUND = 9;

// ffc->Misc[] index
const int SPUME_IDX_BASE_COMBO = 0;

// Combo offsets
const int SPUME_COMBO_SUBMERGED = 0;
const int SPUME_COMBO_EMERGING = 4;
const int SPUME_COMBO_EMERGED = 8;
const int SPUME_COMBO_CHARGING = 12;
const int SPUME_COMBO_FIRING = 16;

ffc script Spume
{
    void run(int enemyID)
    {
        npc ghost;
        int spawnType;
        int spawnFlag;
        int defenses[18];
        int timer;
        bool cancelShot;
        
        ghost=Ghost_InitAutoGhost(this, enemyID);
        Ghost_SetFlag(GHF_STUN);
        Ghost_SetFlag(GHF_CLOCK);
        Ghost_SetFlag(GHF_4WAY);
        
        // Find a spawn point first
        spawnType=ghost->Attributes[SPUME_ATTR_SPAWN_TYPE];
        spawnFlag=ghost->Attributes[SPUME_ATTR_SPAWN_FLAG];
        if(spawnType>=0)
        {
            int spawnPoint;
            if(spawnType==0 && spawnFlag==0)
                spawnPoint=FindSpawnPoint(false, false, true, false);
            else
                spawnPoint=FindSpawnPoint(spawnType, spawnFlag);
            Ghost_X=ComboX(spawnPoint);
            Ghost_Y=ComboY(spawnPoint);
        }
        
        // Spawn
        Ghost_SpawnAnimationPuff(this, ghost);
        
        // Other setup
        Ghost_StoreDefenses(ghost, defenses);
        this->Misc[SPUME_IDX_BASE_COMBO]=Ghost_Data;
        Ghost_SetAllDefenses(ghost, NPCDT_IGNORE);
        ghost->Defense[NPCD_BOMB]=defenses[NPCD_BOMB]; // Don't ignore bombs
        ghost->Defense[NPCD_SBOMB]=defenses[NPCD_SBOMB];
        
        while(true)
        {
            // Wait until Link is far away for a full second before emerging
            for(timer=0; timer<60; timer++)
            {
                if(LinkTooClose())
                    timer=0;
                
                FaceLink();
                Ghost_Waitframe(this, ghost, true, true);
            }
            
            Emerge(this, ghost, defenses);
            
            // Fire every so often as long as Link isn't too close
            cancelShot=false;
            while(true)
            {
                for(timer=Rand(SPUME_FIRE_RATE_MIN, SPUME_FIRE_RATE_MAX);
                    timer>0; timer--)
                {
                    FaceLink();
                    Ghost_Waitframe(this, ghost, true, true);
                    if(LinkTooClose())
                    {
                        cancelShot=true;
                        break;
                    }
                }
                
                // Link got too close; abort
                if(cancelShot)
                    break;
                
                Fire(this, ghost);
            }
            
            Submerge(this, ghost, defenses);
        }
    }
    
    // Shoot at Link
    void Fire(ffc this, npc ghost)
    {
        int projSprite=Ghost_GetAttribute(ghost, SPUME_ATTR_PROJ_SPRITE, 17);
        int projSound=ghost->Attributes[SPUME_ATTR_PROJ_SOUND];
        int projTrans=ghost->Attributes[SPUME_ATTR_PROJ_TRANS];
        int projFlags;
        eweapon wpn;
        
        // Set up eweapon flags
        projFlags=EWF_SHADOW|EWF_ROTATE;
        if(projTrans==1 || projTrans==3)
            projFlags|=EWF_FLICKER;
        
        if(CurrentShieldLevel()<ghost->Attributes[SPUME_ATTR_SHIELD_LEVEL])
            projFlags|=EWF_UNBLOCKABLE;
        
        // Charge for half a second
        Game->PlaySound(ghost->Attributes[SPUME_ATTR_CHARGE_SOUND]);
        Ghost_Data=this->Misc[SPUME_IDX_BASE_COMBO]+SPUME_COMBO_CHARGING;
        Ghost_Waitframes(this, ghost, true, true, SPUME_CHARGE_TIME);
        
        // And fire
        wpn=FireAimedEWeapon(SPUME_EWEAPON, Ghost_X, Ghost_Y, 0,
                             SPUME_PROJ_STEP, ghost->WeaponDamage, projSprite,
                             projSound, projFlags);
        if(ghost->Attributes[SPUME_ATTR_PROJ_ARC]>0)
        {
            SetEWeaponMovement(wpn, EWM_THROW, -1);
            SetEWeaponDeathEffect(wpn, EWD_VANISH, 0);
        }
        
        // No EWF_TRANSLUCENT yet
        if(projTrans==2 || projTrans==3)
            wpn->DrawStyle=DS_PHANTOM;
        
        Ghost_Data=this->Misc[SPUME_IDX_BASE_COMBO]+SPUME_COMBO_FIRING;
        Ghost_Waitframes(this, ghost, true, true, SPUME_FIRE_TIME);
        
        Ghost_Data=this->Misc[SPUME_IDX_BASE_COMBO]+SPUME_COMBO_EMERGED;
    }
    
    void Emerge(ffc this, npc ghost, int defenses)
    {
        Game->PlaySound(ghost->Attributes[SPUME_ATTR_EMERGE_SOUND]);
        Ghost_SetDefenses(ghost, defenses);
        Ghost_Data=this->Misc[SPUME_IDX_BASE_COMBO]+SPUME_COMBO_EMERGING;
        Ghost_Waitframes(this, ghost, true, true, 12);
        Ghost_Data=this->Misc[SPUME_IDX_BASE_COMBO]+SPUME_COMBO_EMERGED;
    }
    
    void Submerge(ffc this, npc ghost, int defenses)
    {
        Game->PlaySound(ghost->Attributes[SPUME_ATTR_SUBMERGE_SOUND]);
        Ghost_Data=this->Misc[SPUME_IDX_BASE_COMBO]+SPUME_COMBO_EMERGING;
        Ghost_Waitframes(this, ghost, true, true, 12);
        Ghost_Data=this->Misc[SPUME_IDX_BASE_COMBO]+SPUME_COMBO_SUBMERGED;
        
        // Ignore everything but bombs while submerged
        Ghost_SetAllDefenses(ghost, NPCDT_IGNORE);
        ghost->Defense[NPCD_BOMB]=defenses[NPCD_BOMB];
        ghost->Defense[NPCD_SBOMB]=defenses[NPCD_SBOMB];
    }
    
    // Set Ghost_Dir to face Link
    void FaceLink()
    {
        float angle=Angle(Ghost_X, Ghost_Y, Link->X, Link->Y);
        Ghost_Dir=AngleDir4(WrapDegrees(angle));
    }
    
    // Is Link too close for the Spume to come out?
    bool LinkTooClose()
    {
        return Distance(Ghost_X, Ghost_Y, Link->X, Link->Y)<SPUME_SAFE_DIST;
    }
    
    // Get the level of Link's current shield
    int CurrentShieldLevel()
    {
        itemdata id;
        int maxLevel=0;
        
        for(int i=0; i<256; i++)
        {
            if(!Link->Item[i])
                continue;
            
            id=Game->LoadItemData(i);
            if(id->Family!=SPUME_IC_SHIELD)
                continue;
            
            if(id->Level>maxLevel)
                maxLevel=id->Level;
        }
        
        return maxLevel;
    }
}
