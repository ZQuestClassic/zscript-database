{
  "name": "Splitting and Tribbling Enemies",
  "author": "Timelord",
  "added": null,
  "updated": "04 May 2017",
  "tags": [
    "#Enemy",
    "#FFC",
    "#Global",
    "#Library"
  ],
  "rating": "1",
  "downloads": "37",
  "info": "A header to control 'Split on Hit', 'Split on Death', and 'Tribble' effects for any enemy. Contains both ffc scripts, and global functions to handle this, on a per-screen, or game-wise basis.",
  "description": "Ordinarily, only walking enemy types, and some other types, may split on hit, split on death, or tribble. This header grants you the power to make any enemy do one, or more of these.You may choose to use the ffcs, to handle splitting/tribbling enemies on a per-screen basis, or the global function (see the supplied example global active script) to do so game-wide.",
  "setup": "Requires: std.zh\n\nCompile, adding this to your buffer, or import directives.\n\nFFC Usage\nThere are three ffcs supplied wit the package:\nSplitOnDeath: Makes any enemy split on death.\nSplitOnHit: Makes any enemy split on hit.\nBasicTribble: This allows you to make a tribbling enemy.\n\nFFC Set-Up\nPlace the ffc on the screen, and configure its arguments:\n\nSplitOnDeath Args\nD0: Source Enemy ID.\nD1: ID of enemy to split into.\nD2: Number of splits. i.e. On death, enemy D0 will split into D2 quantity of D1.\nD3: A randomising factor for spawning the splits (x/y coordinates). Suggested value range: 2 to 5.\nD4: Sound to play when enemy splits, from Quest->Audio->SFX/Misc\nD5: If splitting a gleeok enemy, set this to '1' to ensure that it always spawns at the system default coordinates.\n\nSplitOnHit Args\nD0: Source Enemy ID.\nD1: ID of enemy to split into.\nD2: Number of splits. i.e. When hit, enemy D0 will split into D2 quantity of D1.\nD3: A randomising factor for spawning the splits. Suggested value range: 2 to 5.\nD4: The sound to play when the enemy splits.\nD5: Set to '1' if you wish to prevent the enemy from splitting if it is dying.\nD6: If splitting a gleeok enemy, set this to '1' to ensure that it always spawns at the system default coordinates.\n\nBasicTribble Args\nD0: The enemy ID of the base enemy that will split when killed. ///\nD1: The enemy that the main enemy becomes, when killed. ///\nD2: The number of enemies the main enemy splits into. ///\nD4: The ID of the enemy that D1 becomes when it 'tribbles up'. Set to '0' to use the main enemy (e.g. zols). ///\nD5: The ransomised distance to spawn the split-offs into. Suggested value range: 2 to 5. ///\nD6: The timer, for the split-offs, in frames. Thus, '240' would be 5 seconds. ///\n\n\n\n\nWhen enemy D0 dies, it splits into D2 quantity of enemy D1 at a distance of D0->X and D0->Y +/- D5 pixels. Then, when the duration defined in D6 expires (it is set as a separate timer, on a per-enemy basis), D1 will transform into D4, unless D4 is not set to a positive value, in which case, it transforms into D0.\nD7: The sound to play when an enemy splits, or tribbles. Decimal value is for splitting, integer for tribbling.\nFormat:\n#####.xxxx Tribble Sound\nxxxxx.#### Split Sound\nExample: 103.0024 : Enemy will play sound 103 when it tribbles, and sound 24 when it splits.\nGlobal Version\nIf you wish to handle these effects globally, you will want to use the global functions:\n\nvoid TribbleEnemies(int waver, int trib_timer_dur) \n* Tribbles enemies based on an internal array 'list[]'\n* param 'waver' is the variation in distance (x/y) when enemies spawn.\n* Param 'trib_timer_dur' is the time it takes (in frames) for a split enemy to 'grow up'.\n* Fill in the array 'list[]' with enemy definitions in the following format:\nbase_enemy, replace with, number of tribbles, tribbles_become\nExample: int list[]={1,10,2,16, 2,102,3,103, 40, 12, 2, 70};\nEnemy 1 will become enemy 10 when it splits, and will split into 2 of enemy 10. When it grows up, each enemy 10 becomes enemy 16.\nEnemy 2 will become enemy 102 when it splits, and will split into 3 of enemy 102. When it grows up, each enemy 102 becomes enemy 103.\nEnemy 40 will become enemy 12 when it splits, and will split into 2 of enemy 12. When it grows up, each enemy 12 becomes enemy 70.\n* You may expand on this list, or reduce it, or otherwise change it as desired.\n* Each entry to the list is a set of four values.\n\nvoid SplitOnDeath(int dist_flux)\n* Splits enemies (when they die) based on an internal array 'list[]'\n* param 'dist_flux' is the variation in distance (x/y) when enemies spawn.\n* Fill in the array 'list[]' with enemy definitions in the following format:\nbase_enemy, replace with, number of replacements\nExample: int list[]={1,10,2, 2,102,3, 40, 12, 5};\nEnemy 1 will become enemy 10 when it dies, and will split into 2 of enemy 10.\nEnemy 2 will become enemy 102 when it dies, and will split into 3 of enemy 102.\nEnemy 40 will become enemy 12 when it dies, and will split into 5 of enemy 12.\n* You may expand on this list, or reduce it, or otherwise change it as desired.\n* Each entry to the list is a set of three values.\n\nvoid SplitOnHit(int dist_flux)\n* Splits enemies (when they are damaged by any lweapon) based on an internal array 'list[]'\n* param 'dist_flux' is the variation in distance (x/y) when enemies spawn.\n* Fill in the array 'list[]' with enemy definitions in the following format:\nbase_enemy, replace with, number of replacements\nExample: int list[]={1,10,2, 2,102,3, 40, 12, 5};\nEnemy 1 will become enemy 10 when it is damaged, and will split into 2 of enemy 10.\nEnemy 2 will become enemy 102 when it is damaged, and will split into 3 of enemy 102.\nEnemy 40 will become enemy 12 when it is damaged, and will split into 5 of enemy 12.\n* You may expand on this list, or reduce it, or otherwise change it as desired.\n* Each entry to the list is a set of three values.",
  "has_zip": true,
  "has_popup": true
}