//Constant Walk. When HP falls below specific attribute, gains new attributes.

//Random rate, hunger, homing factor, step speed are used.
//Attribute 1 - damage threshold.
//Attribute 2 - new Random Rate
//Attribute 3 - new step speed.
//Attribute 4 - new homing factor
//Attribute 5 - new weapon damage, if >0, fires eweapons, like death knight
//Attribute 6 - cset to recolor into
//Attribute 7 - sound to play on getting frenzied
//Attribute 8 - delay between shots, in frames

ffc script Frenzied{
	void run(int enemyID){
		npc ghost = Ghost_InitAutoGhost(this, enemyID);
		
		int HF = ghost->Homing;
		int HR = ghost->Haltrate;
		int RR = ghost->Rate;
		int HNG = ghost->Hunger;
		int SPD = ghost->Step;
		int WPND = ghost->WeaponDamage;
		
		int dmgthr = Ghost_GetAttribute(ghost, 0, ghost->HP);
		int newrr = Ghost_GetAttribute(ghost, 1, RR);
		int newspeed = Ghost_GetAttribute(ghost, 2, SPD);
		int newhf = Ghost_GetAttribute(ghost, 3, HF);
		int newwpnd = Ghost_GetAttribute(ghost, 4, WPND);
		int newcset = Ghost_GetAttribute(ghost, 5, ghost->CSet);
		int sound = Ghost_GetAttribute(ghost, 6, 0);
		int shootcounter = Ghost_GetAttribute(ghost, 7, 60);
				
		//ghost->Extend=3;
		
		Ghost_SetFlag(GHF_NORMAL);
		
		int State = 0;
		int haltcounter = -1;
		bool frenzy = false;
		int shc = shootcounter;
		
		while(true){
			if (State==0){
			haltcounter = Ghost_ConstantWalk4(haltcounter, SPD, RR, HF, HNG);
			if (!frenzy){
				if (Ghost_HP<dmgthr){
					Game->PlaySound(sound);
					Ghost_CSet = newcset;
					WPND = newwpnd;
					RR = newrr;
					HF = newhf;
					SPD = newspeed;
					frenzy = true;
				}
			}
			if (WPND>0){
				if (shc>0) shc--;
				if (shc<=0){
					eweapon e = FireNonAngularEWeapon(ghost->Weapon, Ghost_X, Ghost_Y, ghost->Dir, 300, WPND, -1, 0, EWF_ROTATE);
					shc = shootcounter;
				}
			}
			Ghost_Waitframe(this, ghost);
			}
		}
	}
}