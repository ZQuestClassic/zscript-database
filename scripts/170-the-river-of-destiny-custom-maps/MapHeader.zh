//FlounderMAJ Custom Map Header File

//---See the Manual and Quest Example for complete setup instructions---

//This file contains all of the Global variables and functions necessary to implement 
//a fully functional custom map.  It is generally not necessary for the Functions to 
//be edited.  As long as everything is set up properly in ZQuest, calling the functions 
//should work in every situation.  Variables that the user must configure are noted below.
//Other variables should not be altered.

//Requires "std.zh"

//---Global Variables and Constants---

//Configure Constants Below

const int BSOW=0;   //Set this to '1' if you are using BS Overworlds for Level 0.  If using a Full 16x8 Overworld, leave this '0'.  
				//Values other than '0' or '1' will have undesirable results.

const int MapOpenSnd=41;  //These are sound effect numbers for Opening/closing the map, scrolling between floors, and an error sound.
const int MapScrollSnd=5;
const int ErrorSnd=6;

const int BlankCombo = 1543;		//Blank Combo
const int FreezeAllCombo = 1576;	//Blank Combo with "Freeze all (Except FFCs)" type
const int FreezeFFCCombo = 1577;	//Blank Combo with "Freeze all (FFCs only)" type
const int FreezeAllFFC = 31;		//FFC Slots for screen freezing
const int FreezeFFCFFC = 32;


const int LinkTile=35342; 	//The tile for the Link marker on the map. Use the number for the actual tile MINUS the value of "blink".
						//Make sure the tile BEFORE the one you enter here is blank. See Quest example.
const int LinkFlr=35344; 		//Tile for the symbol that will show which floor Link is on.
const int FlrList=35100;		//Top-Left tile for the 8x16 block of tiles reserved for the floor markers for each level.  
const int FlrMarker=35340; 	//Tile that marks the floor of the map you are viewing.
const int ChestMark=35353;	//Tile for the treasure chest symbol to be placed in the rooms on the map.
const int BossMark=35346; 	//The tile for the Blinking boss room mark.  Use the number for the actual tile PLUS the value of "blink".
						//Make sure the tile AFTER the one you enter here is blank. See Quest example.
const int BossFlrMk=35348;	//Tile for the marker that shows which floor of the map the boss is on.
const int MapMark=35350; 		//The tile for a blinking marker on the map. Use the number for the actual tile PLUS the value of "blink".
						//Make sure the tile AFTER the one you enter here is blank. See Quest example.
const int Reticle=35354; 		//Tile for the reticle that marks the room Link is in, shown on every floor in dungeons.
const int VTileInit=35280; 	//Initial Tile that is drawn over explored rooms of a dungeon. Changes based on the doors in the room and the map item.
						//See Quest example for correct tile layout.
const int OWVTile=35357; 		//Tile that is drawn over unexplored screens of the Overworld map. The Top 11 rows of pixels on this tile should be black. 
						//The bottom 5 rows should be transparent.
const int LayerMap=10;   		//This is the ZQuest map number that contains all of the indexed dungeon and OW Maps.  See Quest Example.

const int MapItemTile=23441;	 	//Tile for the Map item.
const int CompassItemTile=23420;	//Tile for the Compass Item.
const int BigKeyItemTile=23127;	//Tile for the Big Key item.
const int KeyItemTile=25306;		//Tile for the small key indicator, should be a minitile in the top left corner of the tile.
const int MCset=8;				//CSet for Map tile.
const int CCset=8;				//CSet for Compass tile.
const int BKCset=8;				//CSet for Big Key tile.
const int KCset=8;				//CSet for small key tile.

const int TitleFont=0;		//Fonts for text.
const int TextFont=2;
const int KeyCtFont=1;

const int ShadowColor=0;			//Colors for text and text shadows.
const int TitleColor=1;
const int TextColor=1;
const int KeyCtColor=1;

const int LinkCSet=6;				//CSets of Map Markers and explored/unexplored tiles.
const int SymbolCSet=1;
const int VTileCSet=1;
const int OWVTileCSet=1;
	
//Don't change the Variables Below

int BossFlr;	//General Variables used in several functions.
int BossScrn;
bool BossDead;
int DMapsLv[8];
int setmarksbeenrun=0;

int Lv0Fl1Doors[128];		//These arrays are used to store a door configuration for each room on each floor of each level.
int Lv0Fl2Doors[128];		//This value is added to "VTileInit" to display the correct tile on explored dungeon rooms.
int Lv0Fl3Doors[128];		//To conserve memory, you may comment out the floors you aren't using. Remember to comment the corresponding 
int Lv0Fl4Doors[128];		//lines in the functions that use the arrays.
int Lv0Fl5Doors[128];
int Lv0Fl6Doors[128];
int Lv0Fl7Doors[128];
int Lv0Fl8Doors[128];
int Lv1Fl1Doors[128];
int Lv1Fl2Doors[128];
int Lv1Fl3Doors[128];
int Lv1Fl4Doors[128];
int Lv1Fl5Doors[128];
int Lv1Fl6Doors[128];
int Lv1Fl7Doors[128];
int Lv1Fl8Doors[128];
int Lv2Fl1Doors[128];
int Lv2Fl2Doors[128];
int Lv2Fl3Doors[128];
int Lv2Fl4Doors[128];
int Lv2Fl5Doors[128];
int Lv2Fl6Doors[128];
int Lv2Fl7Doors[128];
int Lv2Fl8Doors[128];
int Lv3Fl1Doors[128];
int Lv3Fl2Doors[128];
int Lv3Fl3Doors[128];
int Lv3Fl4Doors[128];
int Lv3Fl5Doors[128];
int Lv3Fl6Doors[128];
int Lv3Fl7Doors[128];
int Lv3Fl8Doors[128];
int Lv4Fl1Doors[128];
int Lv4Fl2Doors[128];
int Lv4Fl3Doors[128];
int Lv4Fl4Doors[128];
int Lv4Fl5Doors[128];
int Lv4Fl6Doors[128];
int Lv4Fl7Doors[128];
int Lv4Fl8Doors[128];
int Lv5Fl1Doors[128];
int Lv5Fl2Doors[128];
int Lv5Fl3Doors[128];
int Lv5Fl4Doors[128];
int Lv5Fl5Doors[128];
int Lv5Fl6Doors[128];
int Lv5Fl7Doors[128];
int Lv5Fl8Doors[128];
int Lv6Fl1Doors[128];
int Lv6Fl2Doors[128];
int Lv6Fl3Doors[128];
int Lv6Fl4Doors[128];
int Lv6Fl5Doors[128];
int Lv6Fl6Doors[128];
int Lv6Fl7Doors[128];
int Lv6Fl8Doors[128];
int Lv7Fl1Doors[128];
int Lv7Fl2Doors[128];
int Lv7Fl3Doors[128];
int Lv7Fl4Doors[128];
int Lv7Fl5Doors[128];
int Lv7Fl6Doors[128];
int Lv7Fl7Doors[128];
int Lv7Fl8Doors[128];
int Lv8Fl1Doors[128];
int Lv8Fl2Doors[128];
int Lv8Fl3Doors[128];
int Lv8Fl4Doors[128];
int Lv8Fl5Doors[128];
int Lv8Fl6Doors[128];
int Lv8Fl7Doors[128];
int Lv8Fl8Doors[128];
int Lv9Fl1Doors[128];
int Lv9Fl2Doors[128];
int Lv9Fl3Doors[128];
int Lv9Fl4Doors[128];
int Lv9Fl5Doors[128];
int Lv9Fl6Doors[128];
int Lv9Fl7Doors[128];
int Lv9Fl8Doors[128];
int Lv10Fl1Doors[128];
int Lv10Fl2Doors[128];
int Lv10Fl3Doors[128];
int Lv10Fl4Doors[128];
int Lv10Fl5Doors[128];
int Lv10Fl6Doors[128];
int Lv10Fl7Doors[128];
int Lv10Fl8Doors[128];
int Lv11Fl1Doors[128];
int Lv11Fl2Doors[128];
int Lv11Fl3Doors[128];
int Lv11Fl4Doors[128];
int Lv11Fl5Doors[128];
int Lv11Fl6Doors[128];
int Lv11Fl7Doors[128];
int Lv11Fl8Doors[128];
int Lv12Fl1Doors[128];
int Lv12Fl2Doors[128];
int Lv12Fl3Doors[128];
int Lv12Fl4Doors[128];
int Lv12Fl5Doors[128];
int Lv12Fl6Doors[128];
int Lv12Fl7Doors[128];
int Lv12Fl8Doors[128];
int Lv13Fl1Doors[128];
int Lv13Fl2Doors[128];
int Lv13Fl3Doors[128];
int Lv13Fl4Doors[128];
int Lv13Fl5Doors[128];
int Lv13Fl6Doors[128];
int Lv13Fl7Doors[128];
int Lv13Fl8Doors[128];
int Lv14Fl1Doors[128];
int Lv14Fl2Doors[128];
int Lv14Fl3Doors[128];
int Lv14Fl4Doors[128];
int Lv14Fl5Doors[128];
int Lv14Fl6Doors[128];
int Lv14Fl7Doors[128];
int Lv14Fl8Doors[128];
int Lv15Fl1Doors[128];
int Lv15Fl2Doors[128];
int Lv15Fl3Doors[128];
int Lv15Fl4Doors[128];
int Lv15Fl5Doors[128];
int Lv15Fl6Doors[128];
int Lv15Fl7Doors[128];
int Lv15Fl8Doors[128];

bool Flr1Screens[128];		//The arrays here store the visited, chest, and map marker of each screen on each floor of the current level.
bool Flr2Screens[128];
bool Flr3Screens[128];
bool Flr4Screens[128];
bool Flr5Screens[128];
bool Flr6Screens[128];
bool Flr7Screens[128];
bool Flr8Screens[128];
bool Flr1Chests[128];
bool Flr2Chests[128];
bool Flr3Chests[128];
bool Flr4Chests[128];
bool Flr5Chests[128];
bool Flr6Chests[128];
bool Flr7Chests[128];
bool Flr8Chests[128];
bool Flr1Marks[128];
bool Flr2Marks[128];
bool Flr3Marks[128];
bool Flr4Marks[128];
bool Flr5Marks[128];
bool Flr6Marks[128];
bool Flr7Marks[128];
bool Flr8Marks[128];

//---End Global Variables---


//---Functions---

//The following Functions are implemented.  Do not alter these, except to comment out lines in the doors functions as described above.
//Below is a list of the functions and a description.

//void Map (int Level, int DMap, int DScreen, int MScreen, bool Map, bool Compass, bool BigKey)
			//This is the actual Map function.  Call this in the Global Script to display the map until the "Map" 
			//button is pressed.
			
//void StateList (int Level)
			//This function prepares all the necessary reference tables for the screen states in the passed Level.
			//Call this in the global script before the Map function, or Map won't work properly.
			
//void DoorsList(int Level, int DMap, int MScreen)
			//This function Sets the door configuration for the passed screen.  To work right, must be called every time you 
			//enter a new screen.  To improve Speed You can comment out the lines you don't need for the floors you won't use. 
			
//int DoorsLookup (int Level, int MScreen, int Floor)
			//This function looks up the door configuration for the passed screen. Called during the Map function when drawing explored 
			//rooms in dungeons. Value is only valid if the room has been explored and the DoorsList Function has been called in it.
			//To improve Speed You can comment out the lines you don't need for the floors you won't use.
			
//void initializeSList ()
			//This function initializes all the arrays needed for the state list and doors functions.  Call it in the global script 
			//the first time the game is played.
			
//bool Visited (int floor, int screen)
			//This Function looks up the visited state for the passed floor and screen.  Called in the Map function when drawing over 
			//explored/unexplored rooms.
			
//bool OpenChests (int floor, int screen)
			//This Function looks up the Treasure Chest state for the passed floor and screen.  Called in the Map function when drawing Chest  
			//symbols on rooms.
			
//bool MapMarks (int floor, int screen)
			//This function looks up the Map marks for the passed floor and screen. Called in the Map function when drawing map marks on rooms.

//int BossFloor ()
			//Returns the Floor of the current level that contains the dungeon boss.  Called in the Map Function when drawing Boss Marks.

//int BossScreen ()
			//Returns the Screen of the boss floor that contains the Dungeon Boss.  Called in the Map Function when drawing Boss Marks.
			
//bool BossDead ()
			//Returns whether the boss is dead or not.  Called in the Map Function when drawing Boss Marks.
			
//Function Code commences below

//---Map---

//This Function is for custom map screens.  When called, a map is drawn on Layer 7 of the screen and 
//the specific map for this level is drawn on top.  Compass items are layered over that and Link's position on 
//the map is calculated and displayed.  Level Maps are limited to 8 DMaps, which can be scrolled through.  Maps are 
//supported for Levels 0-15.  
	
void Map(int Level, int DMap, int DScreen, int MScreen, bool Map, bool Compass, bool BigKey)
{

	//===User Configurable Variables===
	
	int Max[16]={1,1,3,8,3,1,1,1,1,1,1,1,1,1,1,1};  //This array contains the maximum number of floors for each level.  Each must be at least 1. Max is 8

	int blink=1;        	//Generic value for making icons blink.  Script adds or subtracts this value to the selected tile every 30 frames.
							//you can use any number as long as the tiles are set up properly. See the Global Constants section at the top.
							
	int MapString[]="MAP";				//Strings for map components.  Change them if you want to, but it's not necessary.
	int ItemsString[]="LEVEL ITEMS";
	int CompassString[]="COMPASS";
	int BKeyString[]="BIG KEY";
	int SKeyString[]="SMALL KEYS";

	int Level0String[]="Hyrule Overworld";		//Strings for the Level Titles.  Changes these to the names of your Levels.
	int Level1String[]="Level 1";
	int Level2String[]="Level 2";
	int Level3String[]="Level 3";
	int Level4String[]="Level 4";
	int Level5String[]="Level 5";
	int Level6String[]="Level 6";
	int Level7String[]="Level 7";
	int Level8String[]="Level 8";
	int Level9String[]="Level 9";
	int Level10String[]="Level 10";
	int Level11String[]="Level 11";
	int Level12String[]="Level 12";
	int Level13String[]="Level 13";
	int Level14String[]="Level 14";
	int Level15String[]="Level 15";
	
	//===End User configurable===
						

	ffc FreezeAll = Screen->LoadFFC(FreezeAllFFC);		//FFCs for screen freezing
	ffc FreezeFFC = Screen->LoadFFC(FreezeFFCFFC);
	
	bool dmapflag1=GetDMapFlag(DMap,DMF_SCRIPT1);
	bool dmapflag2=GetDMapFlag(DMap,DMF_SCRIPT2);
	bool dmapflag3=GetDMapFlag(DMap,DMF_SCRIPT3);
	bool dmapflag4=GetDMapFlag(DMap,DMF_SCRIPT4);
	
	bool FirstFlr = (dmapflag1 && !dmapflag2 && !dmapflag3 && !dmapflag4); //DMap flags make floor selections    1000
	bool SecondFlr = (!dmapflag1 && dmapflag2 && !dmapflag3 && !dmapflag4); //0100
	bool ThirdFlr = (!dmapflag1 && !dmapflag2 && dmapflag3 && !dmapflag4); //0010
	bool FourthFlr = (!dmapflag1 && !dmapflag2 && !dmapflag3 && dmapflag4); //0001
	bool FifthFlr = (dmapflag1 && dmapflag2 && !dmapflag3 && !dmapflag4); //1100
	bool SixthFlr = (dmapflag1 && !dmapflag2 && dmapflag3 && !dmapflag4); //1010
	bool SeventhFlr = (dmapflag1 && !dmapflag2 && !dmapflag3 && dmapflag4); //1001
	bool EighthFlr = (dmapflag1 && dmapflag2 && dmapflag3 && !dmapflag4); //1110
	bool ZerothFlr = (!dmapflag1 && !dmapflag2 && !dmapflag3 && !dmapflag4); //0000
	
	int Dungeon=0;
	if(0<Level&&Level<16) Dungeon=1;
	int IconX=16*(DScreen-16*Floor(DScreen/16))+(64*(BSOW|Dungeon)); //The position of the Link marker is calculated here, based on 
	int IconY=Floor(DScreen/16)*11+16;									//a map of 16x11 pixel screen positions.
	int VTile=VTileInit;
	
	int index=1; //This is for the map floor selection
	if (FirstFlr) index=1;
	if (SecondFlr) index=2;
	if (ThirdFlr) index=3;
	if (FourthFlr) index=4;
	if (FifthFlr) index=5;
	if (SixthFlr) index=6;
	if (SeventhFlr) index=7;
	if (EighthFlr) index=8;

			
	int DoorsAdjust=0;
	int trans=OP_OPAQUE;
		
	int i;	
	int j=0;
	
	if(Level<16&&MScreen<128)  //flash a white screen for 20 frames and play a sound
	{
		FreezeAll->Data = FreezeAllCombo;	//Freeze the Screen under the map
		FreezeFFC->Data = FreezeFFCCombo;
	
		Game->PlaySound(MapOpenSnd);
		for(j=0;j<20;j++)
		{
			Screen->DrawLayer(7, LayerMap, 129, 0, 0, 0, 0, OP_OPAQUE);
			Screen->DrawLayer(7, LayerMap, 129, 0, 0, -56, 0, OP_OPAQUE);
			WaitNoAction(1);
		}	
	}		
	else //If the Level has no map or Link is on a screen that is not allowed an error sound is played and the function returns.
	{
		Game->PlaySound(ErrorSnd);
		return;
	}
	
	while (true)
	{
		Link->InputStart = false; Link->PressStart = false;  //cancel Link's inputs, except up/down
		Link->InputLeft = false; Link->PressLeft = false;
		Link->InputRight = false; Link->PressRight = false;
		Link->InputR = false; Link->PressR = false;
		Link->InputL = false; Link->PressL = false;
		Link->InputA = false; Link->PressA = false;
		Link->InputB = false; Link->PressB = false;
		Link->InputEx1 = false; Link->PressEx1 = false;
		Link->InputEx2 = false; Link->PressEx2 = false;
		Link->InputEx3 = false; Link->PressEx3 = false;
		Link->InputEx4 = false; Link->PressEx4 = false;

		if (i==30) {blink=blink*-1; i++;}  //This allows the Icons to blink on the map
		else if (i>=60) {blink=blink*-1; i=0;}
		else {i++;}

		if (Link->PressMap)		//return from function by pressing map again.
		{						

			for(j=0;j<20;j++)		//flash a white screen for 20 frames and play a sound
			{
				Game->PlaySound(MapOpenSnd);
				if (MScreen<128)
				{
					Screen->DrawLayer(7, LayerMap, 129, 0, 0, 0, 0, OP_OPAQUE);
					Screen->DrawLayer(7, LayerMap, 129, 0, 0, -56, 0, OP_OPAQUE);
					WaitNoAction(1);
				}
			}	
			FreezeAll->Data = BlankCombo;		//Unfreeze Screen
			FreezeFFC->Data = BlankCombo;

			return;

		}
		else if (Level<16&&MScreen<128) //This is where the map is displayed, if Level is 0-15, and Link has the Map, and not on a cave or cellar screen
		{									

			
			if (Link->PressDown) //Here, the index is adjusted as you scroll through the maps.  If the max or min is reached, an error sound plays.
			{						
				if (0<index&&index<Max[Level]) {index++; Game->PlaySound(MapScrollSnd);}
				else Game->PlaySound(ErrorSnd);
			}
			if (Link->PressUp)
			{
				if (1<index&&index<Max[Level]+1) {index--; Game->PlaySound(MapScrollSnd);}
				else Game->PlaySound(ErrorSnd);
			}

			//Map layer screens must be indexed properly in ZQuest, or they will not display correctly.
			Screen->DrawLayer(7, LayerMap, 130, 0, 0, 0, 0, OP_OPAQUE);  //Map Frame drawn here
			if (Map) {Screen->DrawLayer(7, LayerMap, (Level*8)+index-1, 0, 0, 0, 0, OP_OPAQUE); }  //Map layer drawn here
			Screen->DrawLayer(7, LayerMap, 128, 0, 0, -56, 0, OP_OPAQUE);
			
			if(BSOW==1||Level!=0)	//Floor Markers for Dungeons and BS Overworlds
			{
				Screen->DrawTile(7, 32, 16, FlrList+Level, 1, 8, SymbolCSet, -1, -1, 0, 0, 0, 0, true, OP_OPAQUE);  //Floor Markers Drawn here
				
				if(index==1) Screen->FastTile(7, 32, 16, FlrMarker, SymbolCSet, OP_OPAQUE); //This will draw a marker indicating the viewed floor.
				if(index==2) Screen->FastTile(7, 32, 32, FlrMarker, SymbolCSet, OP_OPAQUE);
				if(index==3) Screen->FastTile(7, 32, 48, FlrMarker, SymbolCSet, OP_OPAQUE);
				if(index==4) Screen->FastTile(7, 32, 64, FlrMarker, SymbolCSet, OP_OPAQUE);
				if(index==5) Screen->FastTile(7, 32, 80, FlrMarker, SymbolCSet, OP_OPAQUE);
				if(index==6) Screen->FastTile(7, 32, 96, FlrMarker, SymbolCSet, OP_OPAQUE);
				if(index==7) Screen->FastTile(7, 32, 112, FlrMarker, SymbolCSet, OP_OPAQUE);
				if(index==8) Screen->FastTile(7, 32, 128, FlrMarker, SymbolCSet, OP_OPAQUE);
				
				if(FirstFlr) Screen->FastTile(7, 48, 16, LinkFlr, LinkCSet, OP_OPAQUE); //This will draw a Link marker indicating which floor Link is currently on.
				if(SecondFlr) Screen->FastTile(7, 48, 32, LinkFlr, LinkCSet, OP_OPAQUE);
				if(ThirdFlr) Screen->FastTile(7, 48, 48, LinkFlr, LinkCSet, OP_OPAQUE);
				if(FourthFlr) Screen->FastTile(7, 48, 64, LinkFlr, LinkCSet, OP_OPAQUE); 
				if(FifthFlr) Screen->FastTile(7, 48, 80, LinkFlr, LinkCSet, OP_OPAQUE); 
				if(SixthFlr) Screen->FastTile(7, 48, 96, LinkFlr, LinkCSet, OP_OPAQUE); 
				if(SeventhFlr) Screen->FastTile(7, 48, 112, LinkFlr, LinkCSet, OP_OPAQUE); 
				if(EighthFlr) Screen->FastTile(7, 48, 128, LinkFlr, LinkCSet, OP_OPAQUE); 
			}
			else if(BSOW==0&&Level==0)	//Floor Markers for Normal overworlds
			{
				Screen->DrawTile(7, 32, 112, FlrList+Level+160, 8, 1, SymbolCSet, -1, -1, 0, 0, 0, 0, true, OP_OPAQUE);  //Floor Markers Drawn here
				
				if(index==1) Screen->FastTile(7, 32, 112, FlrMarker, SymbolCSet, OP_OPAQUE); //This will draw a marker indicating the viewed floor.
				if(index==2) Screen->FastTile(7, 48, 112, FlrMarker, SymbolCSet, OP_OPAQUE);
				if(index==3) Screen->FastTile(7, 64, 112, FlrMarker, SymbolCSet, OP_OPAQUE);
				if(index==4) Screen->FastTile(7, 80, 112, FlrMarker, SymbolCSet, OP_OPAQUE);
				if(index==5) Screen->FastTile(7, 96, 112, FlrMarker, SymbolCSet, OP_OPAQUE);
				if(index==6) Screen->FastTile(7, 112, 112, FlrMarker, SymbolCSet, OP_OPAQUE);
				if(index==7) Screen->FastTile(7, 128, 112, FlrMarker, SymbolCSet, OP_OPAQUE);
				if(index==8) Screen->FastTile(7, 144, 112, FlrMarker, SymbolCSet, OP_OPAQUE);
				
				if(FirstFlr) Screen->FastTile(7, 32, 128, LinkFlr, LinkCSet, OP_OPAQUE); //This will draw a Link marker indicating which floor Link is currently on.
				if(SecondFlr) Screen->FastTile(7, 48, 128, LinkFlr, LinkCSet, OP_OPAQUE);
				if(ThirdFlr) Screen->FastTile(7, 64, 128, LinkFlr, LinkCSet, OP_OPAQUE);
				if(FourthFlr) Screen->FastTile(7, 80, 128, LinkFlr, LinkCSet, OP_OPAQUE); 
				if(FifthFlr) Screen->FastTile(7, 96, 128, LinkFlr, LinkCSet, OP_OPAQUE); 
				if(SixthFlr) Screen->FastTile(7, 112, 128, LinkFlr, LinkCSet, OP_OPAQUE); 
				if(SeventhFlr) Screen->FastTile(7, 128, 128, LinkFlr, LinkCSet, OP_OPAQUE); 
				if(EighthFlr) Screen->FastTile(7, 144, 128, LinkFlr, LinkCSet, OP_OPAQUE); 				
			}
			

			
			int Vindex;
			for(Vindex=0; Vindex<128; Vindex++)		//This for loop scans all the lookup tables for screen states and draws all the map symbols except Link and the Boss
			{
				if(Map) {trans=OP_TRANS; DoorsAdjust=16;}	//Comment this line if you do not want the explored room tile to become transparent.
				//if(Map) {trans=OP_OPAQUE; DoorsAdjust=DoorsLookup(Level, DMapToMap(Vindex, DMapsLv[index-1]), index);}		//Uncomment this line if you do not want the explored room tile to become transparent.
				else DoorsAdjust=DoorsLookup(Level, DMapToMap(Vindex, DMapsLv[index-1]), index);
				if((Level==0)&&Visited(index,Vindex)) Screen->FastTile(7, (16*(Vindex-16*Floor(Vindex/16))+(64*BSOW)), (Floor(Vindex/16)*11+16), OWVTile, OWVTileCSet, OP_OPAQUE);
				if(!(Level==0)&&!Visited(index,Vindex)) Screen->FastTile(7, (16*(Vindex-16*Floor(Vindex/16))+64), (Floor(Vindex/16)*11+16), VTileInit+DoorsAdjust, VTileCSet, trans);
				if(Compass&&OpenChests(index,Vindex)) Screen->FastTile(7, (16*(Vindex-16*Floor(Vindex/16))+64), (Floor(Vindex/16)*11+16), ChestMark, SymbolCSet, OP_OPAQUE);
				if(Level==0&&MapMarks(index,Vindex)) Screen->FastTile(7, (16*(Vindex-16*Floor(Vindex/16))+(64*BSOW)), (Floor(Vindex/16)*11+16), MapMark+blink, SymbolCSet, OP_OPAQUE); 
				if(Level!=0&&MapMarks(index,Vindex)) Screen->FastTile(7, (16*(Vindex-16*Floor(Vindex/16))+(64)), (Floor(Vindex/16)*11+16), MapMark+blink, SymbolCSet, OP_OPAQUE); 
				
				if(BSOW==1||Level!=0)
				{
					if(Vindex==7||Vindex==7+16||Vindex==7+32||Vindex==7+48||Vindex==7+64||Vindex==7+80||Vindex==7+96||Vindex==7+112) Vindex+=8;
				}
			}
			
			if(!(Level==0)&&Compass)  //Boss Marks drawn here
			{
				if(BossFloor()==1&&!BossDead()) Screen->FastTile(7, 16, 16, BossFlrMk, SymbolCSet, OP_OPAQUE); 
				if(BossFloor()==2&&!BossDead()) Screen->FastTile(7, 16, 32, BossFlrMk, SymbolCSet, OP_OPAQUE); 
				if(BossFloor()==3&&!BossDead()) Screen->FastTile(7, 16, 48, BossFlrMk, SymbolCSet, OP_OPAQUE); 
				if(BossFloor()==4&&!BossDead()) Screen->FastTile(7, 16, 64, BossFlrMk, SymbolCSet, OP_OPAQUE); 
				if(BossFloor()==5&&!BossDead()) Screen->FastTile(7, 16, 80, BossFlrMk, SymbolCSet, OP_OPAQUE); 
				if(BossFloor()==6&&!BossDead()) Screen->FastTile(7, 16, 96, BossFlrMk, SymbolCSet, OP_OPAQUE); 
				if(BossFloor()==7&&!BossDead()) Screen->FastTile(7, 16, 112, BossFlrMk, SymbolCSet, OP_OPAQUE); 
				if(BossFloor()==8&&!BossDead()) Screen->FastTile(7, 16, 128, BossFlrMk, SymbolCSet, OP_OPAQUE); 		
				if(BossFloor()==index&&!BossDead()) Screen->FastTile(7, (16*(BossScreen()-16*Floor(BossScreen()/16))+64), (Floor(BossScreen()/16)*11+16), BossMark+blink, SymbolCSet, OP_OPAQUE);
			}
			
			if (MScreen<128) //only show Link marker when not on a cave/item cellar/passageway/3-stair warp screen
			{
				if(index==1&&FirstFlr) Screen->FastTile(7, IconX, IconY, LinkTile+blink, LinkCSet, OP_OPAQUE);  //Link Marker drawn here, on correct floor of map
				if(index==2&&SecondFlr) Screen->FastTile(7, IconX, IconY, LinkTile+blink, LinkCSet, OP_OPAQUE); 
				if(index==3&&ThirdFlr) Screen->FastTile(7, IconX, IconY, LinkTile+blink, LinkCSet, OP_OPAQUE);  
				if(index==4&&FourthFlr) Screen->FastTile(7, IconX, IconY, LinkTile+blink, LinkCSet, OP_OPAQUE); 
				if(index==5&&FifthFlr) Screen->FastTile(7, IconX, IconY, LinkTile+blink, LinkCSet, OP_OPAQUE); 
				if(index==6&&SixthFlr) Screen->FastTile(7, IconX, IconY, LinkTile+blink, LinkCSet, OP_OPAQUE); 
				if(index==7&&SeventhFlr) Screen->FastTile(7, IconX, IconY, LinkTile+blink, LinkCSet, OP_OPAQUE); 
				if(index==8&&EighthFlr) Screen->FastTile(7, IconX, IconY, LinkTile+blink, LinkCSet, OP_OPAQUE); 
				if(!ZerothFlr)																					 //The lines below will draw a reticle on the map indicating Link's position.  
					//yes I did use "Zeroth Floor"																							//If he is in a dungeon, it will show this reticle on every floor
				{
					if(!(Level==0))Screen->FastTile(7, IconX, IconY, Reticle, 7, OP_OPAQUE);
					else if (index==1&&FirstFlr) Screen->FastTile(7, IconX, IconY, Reticle, SymbolCSet, OP_OPAQUE);
					else if (index==2&&SecondFlr) Screen->FastTile(7, IconX, IconY, Reticle, SymbolCSet, OP_OPAQUE);
					else if (index==3&&ThirdFlr) Screen->FastTile(7, IconX, IconY, Reticle, SymbolCSet, OP_OPAQUE);
					else if (index==4&&FourthFlr) Screen->FastTile(7, IconX, IconY, Reticle, SymbolCSet, OP_OPAQUE);
					else if (index==5&&FifthFlr) Screen->FastTile(7, IconX, IconY, Reticle, SymbolCSet, OP_OPAQUE);
					else if (index==6&&SixthFlr) Screen->FastTile(7, IconX, IconY, Reticle, SymbolCSet, OP_OPAQUE);
					else if (index==7&&SeventhFlr) Screen->FastTile(7, IconX, IconY, Reticle, SymbolCSet, OP_OPAQUE);
					else if (index==8&&EighthFlr) Screen->FastTile(7, IconX, IconY, Reticle, SymbolCSet, OP_OPAQUE);
					else {}
				}
			}
						
			Screen->DrawString(7, 129, -43, TitleFont, ShadowColor, -1, 1, MapString, OP_OPAQUE);			//All Text and Dungeon Item tiles Drawn below
			Screen->DrawString(7, 128, -44, TitleFont, TitleColor, -1, 1, MapString, OP_OPAQUE);			//Unless the Map is an Overworld
			if(!(Level==0))
			{
				if (Map) Screen->FastTile(7, 212, 14, MapItemTile, MCset, OP_OPAQUE);
				if (Compass) Screen->FastTile(7, 212, 38, CompassItemTile, CCset, OP_OPAQUE);
				if (BigKey) Screen->FastTile(7, 212, 62, BigKeyItemTile, BKCset, OP_OPAQUE);
				Screen->FastTile(7, 210, 86, KeyItemTile, KCset, OP_OPAQUE);
				Screen->DrawInteger(7, 221, 91, 1, ShadowColor, -1, 0, 0, Game->LKeys[Level],0, OP_OPAQUE);
				Screen->DrawInteger(7, 220, 90, 1, KeyCtColor, -1, 0, 0, Game->LKeys[Level],0, OP_OPAQUE);
				Screen->DrawString(7, 219, 1, 2, ShadowColor, -1, 1, ItemsString, OP_OPAQUE);
				Screen->DrawString(7, 218, 0, 2, TitleColor, -1, 1, ItemsString, OP_OPAQUE);
				Screen->DrawString(7, 219, 33, 2, ShadowColor, -1, 1, MapString, OP_OPAQUE);
				Screen->DrawString(7, 218, 32, 2, TextColor, -1, 1, MapString, OP_OPAQUE);
				Screen->DrawString(7, 219, 57, 2, ShadowColor, -1, 1, CompassString, OP_OPAQUE);
				Screen->DrawString(7, 218, 56, 2, TextColor, -1, 1, CompassString, OP_OPAQUE);
				Screen->DrawString(7, 219, 81, 2, ShadowColor, -1, 1, BKeyString, OP_OPAQUE);
				Screen->DrawString(7, 218, 80, 2, TextColor, -1, 1, BKeyString, OP_OPAQUE);
				Screen->DrawString(7, 219, 105, 2, ShadowColor, -1, 1, SKeyString, OP_OPAQUE);
				Screen->DrawString(7, 218, 104, 2, TextColor, -1, 1, SKeyString, OP_OPAQUE);	
			}
			if (Level==0) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level0String, OP_OPAQUE);
			if (Level==0) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level0String, OP_OPAQUE);
			if (Level==1) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level1String, OP_OPAQUE);
			if (Level==1) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level1String, OP_OPAQUE);
			if (Level==2) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level2String, OP_OPAQUE);
			if (Level==2) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level2String, OP_OPAQUE);
			if (Level==3) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level3String, OP_OPAQUE);
			if (Level==3) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level3String, OP_OPAQUE);
			if (Level==4) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level4String, OP_OPAQUE);
			if (Level==4) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level4String, OP_OPAQUE);
			if (Level==5) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level5String, OP_OPAQUE);
			if (Level==5) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level5String, OP_OPAQUE);
			if (Level==6) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level6String, OP_OPAQUE);
			if (Level==6) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level6String, OP_OPAQUE);
			if (Level==7) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level7String, OP_OPAQUE);
			if (Level==7) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level7String, OP_OPAQUE);
			if (Level==8) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level8String, OP_OPAQUE);
			if (Level==8) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level8String, OP_OPAQUE);
			if (Level==9) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level9String, OP_OPAQUE);
			if (Level==9) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level9String, OP_OPAQUE);
			if (Level==10) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level10String, OP_OPAQUE);
			if (Level==10) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level10String, OP_OPAQUE);
			if (Level==11) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level11String, OP_OPAQUE);
			if (Level==11) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level11String, OP_OPAQUE);
			if (Level==12) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level12String, OP_OPAQUE);
			if (Level==12) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level12String, OP_OPAQUE);
			if (Level==13) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level13String, OP_OPAQUE);
			if (Level==13) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level13String, OP_OPAQUE);
			if (Level==14) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level14String, OP_OPAQUE);
			if (Level==14) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level14String, OP_OPAQUE);
			if (Level==15) Screen->DrawString(7, 129, -23, TitleFont, ShadowColor, -1, 1, Level15String, OP_OPAQUE);
			if (Level==15) Screen->DrawString(7, 128, -24, TitleFont, TextColor, -1, 1, Level15String, OP_OPAQUE);
			
			
		}
		else //If the Level has no map or Link is on a screen that is not allowed an error sound is played and the function returns.
		{
			Game->PlaySound(ErrorSnd);
			return;
		}
		Waitframe();
	}
}			
//End Map
	
	
//---InitializeSList---

//Initialization Function to be called when the game is first run
	
void InitializeSList ()
{

	int Screenindex;

	for(Screenindex=0; Screenindex<128; Screenindex++)
	{
		Flr1Screens[Screenindex]=false;
		Flr2Screens[Screenindex]=false;	
		Flr3Screens[Screenindex]=false;
		Flr4Screens[Screenindex]=false;		
		Flr5Screens[Screenindex]=false;
		Flr6Screens[Screenindex]=false;
		Flr7Screens[Screenindex]=false;
		Flr8Screens[Screenindex]=false;
		Flr1Chests[Screenindex]=false;
		Flr2Chests[Screenindex]=false;
		Flr3Chests[Screenindex]=false;
		Flr4Chests[Screenindex]=false;
		Flr5Chests[Screenindex]=false;
		Flr6Chests[Screenindex]=false;
		Flr7Chests[Screenindex]=false;
		Flr8Chests[Screenindex]=false;
		Flr1Marks[Screenindex]=false;
		Flr2Marks[Screenindex]=false;
		Flr3Marks[Screenindex]=false;
		Flr4Marks[Screenindex]=false;
		Flr5Marks[Screenindex]=false;
		Flr6Marks[Screenindex]=false;
		Flr7Marks[Screenindex]=false;
		Flr8Marks[Screenindex]=false;
		Lv0Fl1Doors[Screenindex]=0;		//Comment out the variables you aren't using here, if you want.
		Lv0Fl2Doors[Screenindex]=0;
		Lv0Fl3Doors[Screenindex]=0;
		Lv0Fl4Doors[Screenindex]=0;
		Lv0Fl5Doors[Screenindex]=0;
		Lv0Fl6Doors[Screenindex]=0;
		Lv0Fl7Doors[Screenindex]=0;
		Lv0Fl8Doors[Screenindex]=0;
		Lv1Fl1Doors[Screenindex]=0;
		Lv1Fl2Doors[Screenindex]=0;
		Lv1Fl3Doors[Screenindex]=0;
		Lv1Fl4Doors[Screenindex]=0;
		Lv1Fl5Doors[Screenindex]=0;
		Lv1Fl6Doors[Screenindex]=0;
		Lv1Fl7Doors[Screenindex]=0;
		Lv1Fl8Doors[Screenindex]=0;
		Lv2Fl1Doors[Screenindex]=0;
		Lv2Fl2Doors[Screenindex]=0;
		Lv2Fl3Doors[Screenindex]=0;
		Lv2Fl4Doors[Screenindex]=0;
		Lv2Fl5Doors[Screenindex]=0;
		Lv2Fl6Doors[Screenindex]=0;
		Lv2Fl7Doors[Screenindex]=0;
		Lv2Fl8Doors[Screenindex]=0;
		Lv3Fl1Doors[Screenindex]=0;
		Lv3Fl2Doors[Screenindex]=0;
		Lv3Fl3Doors[Screenindex]=0;
		Lv3Fl4Doors[Screenindex]=0;
		Lv3Fl5Doors[Screenindex]=0;
		Lv3Fl6Doors[Screenindex]=0;
		Lv3Fl7Doors[Screenindex]=0;
		Lv3Fl8Doors[Screenindex]=0;
		Lv4Fl1Doors[Screenindex]=0;
		Lv4Fl2Doors[Screenindex]=0;
		Lv4Fl3Doors[Screenindex]=0;
		Lv4Fl4Doors[Screenindex]=0;
		Lv4Fl5Doors[Screenindex]=0;
		Lv4Fl6Doors[Screenindex]=0;
		Lv4Fl7Doors[Screenindex]=0;
		Lv4Fl8Doors[Screenindex]=0;
		Lv5Fl1Doors[Screenindex]=0;
		Lv5Fl2Doors[Screenindex]=0;
		Lv5Fl3Doors[Screenindex]=0;
		Lv5Fl4Doors[Screenindex]=0;
		Lv5Fl5Doors[Screenindex]=0;
		Lv5Fl6Doors[Screenindex]=0;
		Lv5Fl7Doors[Screenindex]=0;
		Lv5Fl8Doors[Screenindex]=0;
		Lv6Fl1Doors[Screenindex]=0;
		Lv6Fl2Doors[Screenindex]=0;
		Lv6Fl3Doors[Screenindex]=0;
		Lv6Fl4Doors[Screenindex]=0;
		Lv6Fl5Doors[Screenindex]=0;
		Lv6Fl6Doors[Screenindex]=0;
		Lv6Fl7Doors[Screenindex]=0;
		Lv6Fl8Doors[Screenindex]=0;
		Lv7Fl1Doors[Screenindex]=0;
		Lv7Fl2Doors[Screenindex]=0;
		Lv7Fl3Doors[Screenindex]=0;
		Lv7Fl4Doors[Screenindex]=0;
		Lv7Fl5Doors[Screenindex]=0;
		Lv7Fl6Doors[Screenindex]=0;
		Lv7Fl7Doors[Screenindex]=0;
		Lv7Fl8Doors[Screenindex]=0;
		Lv8Fl1Doors[Screenindex]=0;
		Lv8Fl2Doors[Screenindex]=0;
		Lv8Fl3Doors[Screenindex]=0;
		Lv8Fl4Doors[Screenindex]=0;
		Lv8Fl5Doors[Screenindex]=0;
		Lv8Fl6Doors[Screenindex]=0;
		Lv8Fl7Doors[Screenindex]=0;
		Lv8Fl8Doors[Screenindex]=0;
		Lv9Fl1Doors[Screenindex]=0;
		Lv9Fl2Doors[Screenindex]=0;
		Lv9Fl3Doors[Screenindex]=0;
		Lv9Fl4Doors[Screenindex]=0;
		Lv9Fl5Doors[Screenindex]=0;
		Lv9Fl6Doors[Screenindex]=0;
		Lv9Fl7Doors[Screenindex]=0;
		Lv9Fl8Doors[Screenindex]=0;
		Lv10Fl1Doors[Screenindex]=0;
		Lv10Fl2Doors[Screenindex]=0;
		Lv10Fl3Doors[Screenindex]=0;
		Lv10Fl4Doors[Screenindex]=0;
		Lv10Fl5Doors[Screenindex]=0;
		Lv10Fl6Doors[Screenindex]=0;
		Lv10Fl7Doors[Screenindex]=0;
		Lv10Fl8Doors[Screenindex]=0;
		Lv11Fl1Doors[Screenindex]=0;
		Lv11Fl2Doors[Screenindex]=0;
		Lv11Fl3Doors[Screenindex]=0;
		Lv11Fl4Doors[Screenindex]=0;
		Lv11Fl5Doors[Screenindex]=0;
		Lv11Fl6Doors[Screenindex]=0;
		Lv11Fl7Doors[Screenindex]=0;
		Lv11Fl8Doors[Screenindex]=0;
		Lv12Fl1Doors[Screenindex]=0;
		Lv12Fl2Doors[Screenindex]=0;
		Lv12Fl3Doors[Screenindex]=0;
		Lv12Fl4Doors[Screenindex]=0;
		Lv12Fl5Doors[Screenindex]=0;
		Lv12Fl6Doors[Screenindex]=0;
		Lv12Fl7Doors[Screenindex]=0;
		Lv12Fl8Doors[Screenindex]=0;
		Lv13Fl1Doors[Screenindex]=0;
		Lv13Fl2Doors[Screenindex]=0;
		Lv13Fl3Doors[Screenindex]=0;
		Lv13Fl4Doors[Screenindex]=0;
		Lv13Fl5Doors[Screenindex]=0;
		Lv13Fl6Doors[Screenindex]=0;
		Lv13Fl7Doors[Screenindex]=0;
		Lv13Fl8Doors[Screenindex]=0;
		Lv14Fl1Doors[Screenindex]=0;
		Lv14Fl2Doors[Screenindex]=0;
		Lv14Fl3Doors[Screenindex]=0;
		Lv14Fl4Doors[Screenindex]=0;
		Lv14Fl5Doors[Screenindex]=0;
		Lv14Fl6Doors[Screenindex]=0;
		Lv14Fl7Doors[Screenindex]=0;
		Lv14Fl8Doors[Screenindex]=0;
		Lv15Fl1Doors[Screenindex]=0;
		Lv15Fl2Doors[Screenindex]=0;
		Lv15Fl3Doors[Screenindex]=0;
		Lv15Fl4Doors[Screenindex]=0;
		Lv15Fl5Doors[Screenindex]=0;
		Lv15Fl6Doors[Screenindex]=0;
		Lv15Fl7Doors[Screenindex]=0;
		Lv15Fl8Doors[Screenindex]=0;

	}

	for(Screenindex=0; Screenindex<8; Screenindex++)
	{
		DMapsLv[Screenindex]=0;
	}
}
//End InitializeSList


//---StateList---

//Call this before the Map function to Build the tables needed.

void StateList (int Level)
{

	bool dmapflag1;
	bool dmapflag2;
	bool dmapflag3;
	bool dmapflag4;
	bool FirstFlr;
	bool SecondFlr;
	bool ThirdFlr;
	bool FourthFlr;
	bool FifthFlr;
	bool SixthFlr;
	bool SeventhFlr;
	bool EighthFlr;
	
	int Screenindex;
	
	//check which Dmaps apply to each level.
	//Find a DMap with the specified level and floor flag.
	int tableindex=0;
	int DMapindex;
	for(DMapindex=0; DMapindex<512; DMapindex++)
	{
	
		dmapflag1=GetDMapFlag(DMapindex,DMF_SCRIPT1);
		dmapflag2=GetDMapFlag(DMapindex,DMF_SCRIPT2);
		dmapflag3=GetDMapFlag(DMapindex,DMF_SCRIPT3);
		dmapflag4=GetDMapFlag(DMapindex,DMF_SCRIPT4);
	
		FirstFlr = (dmapflag1 && !dmapflag2 && !dmapflag3 && !dmapflag4);
		
		if(Game->DMapLevel[DMapindex]==Level && FirstFlr) 
		{
			DMapsLv[tableindex]=DMapindex;
			break;
		}
		else
		{
			DMapsLv[tableindex]=0;
		}
	}

	tableindex=1;
	for(DMapindex=0; DMapindex<512; DMapindex++)
	{
	
		dmapflag1=GetDMapFlag(DMapindex,DMF_SCRIPT1);
		dmapflag2=GetDMapFlag(DMapindex,DMF_SCRIPT2);
		dmapflag3=GetDMapFlag(DMapindex,DMF_SCRIPT3);
		dmapflag4=GetDMapFlag(DMapindex,DMF_SCRIPT4);
		
		SecondFlr = (!dmapflag1 && dmapflag2 && !dmapflag3 && !dmapflag4);
		
		if(Game->DMapLevel[DMapindex]==Level && SecondFlr) 
		{
			DMapsLv[tableindex]=DMapindex;
			break;
		}
		else
		{
			DMapsLv[tableindex]=0;
		}
	}
	tableindex=2;
	for(DMapindex=0; DMapindex<512; DMapindex++)
	{
	
		dmapflag1=GetDMapFlag(DMapindex,DMF_SCRIPT1);
		dmapflag2=GetDMapFlag(DMapindex,DMF_SCRIPT2);
		dmapflag3=GetDMapFlag(DMapindex,DMF_SCRIPT3);
		dmapflag4=GetDMapFlag(DMapindex,DMF_SCRIPT4);
		
		ThirdFlr = (!dmapflag1 && !dmapflag2 && dmapflag3 && !dmapflag4); 
	
		if(Game->DMapLevel[DMapindex]==Level && ThirdFlr) 
		{
			DMapsLv[tableindex]=DMapindex;
			break;
		}
		else
		{
			DMapsLv[tableindex]=0;
		}
	}
	tableindex=3;
	for(DMapindex=0; DMapindex<512; DMapindex++)
	{
	
		dmapflag1=GetDMapFlag(DMapindex,DMF_SCRIPT1);
		dmapflag2=GetDMapFlag(DMapindex,DMF_SCRIPT2);
		dmapflag3=GetDMapFlag(DMapindex,DMF_SCRIPT3);
		dmapflag4=GetDMapFlag(DMapindex,DMF_SCRIPT4);
		
		FourthFlr = (!dmapflag1 && !dmapflag2 && !dmapflag3 && dmapflag4); 
	
		if(Game->DMapLevel[DMapindex]==Level && FourthFlr) 
		{
			DMapsLv[tableindex]=DMapindex;
			break;
		}
		else
		{
			DMapsLv[tableindex]=0;
		}
	}
	tableindex=4;
	for(DMapindex=0; DMapindex<512; DMapindex++)
	{
	
		dmapflag1=GetDMapFlag(DMapindex,DMF_SCRIPT1);
		dmapflag2=GetDMapFlag(DMapindex,DMF_SCRIPT2);
		dmapflag3=GetDMapFlag(DMapindex,DMF_SCRIPT3);
		dmapflag4=GetDMapFlag(DMapindex,DMF_SCRIPT4);
		
		FifthFlr = (dmapflag1 && dmapflag2 && !dmapflag3 && !dmapflag4);
		
		if(Game->DMapLevel[DMapindex]==Level && FifthFlr) 
		{
			DMapsLv[tableindex]=DMapindex;
			break;
		}
		else
		{
			DMapsLv[tableindex]=0;
		}
	}
	tableindex=5;
	for(DMapindex=0; DMapindex<512; DMapindex++)
	{
	
		dmapflag1=GetDMapFlag(DMapindex,DMF_SCRIPT1);
		dmapflag2=GetDMapFlag(DMapindex,DMF_SCRIPT2);
		dmapflag3=GetDMapFlag(DMapindex,DMF_SCRIPT3);
		dmapflag4=GetDMapFlag(DMapindex,DMF_SCRIPT4);
		
		SixthFlr = (dmapflag1 && !dmapflag2 && dmapflag3 && !dmapflag4); 
	
		if(Game->DMapLevel[DMapindex]==Level && SixthFlr) 
		{
			DMapsLv[tableindex]=DMapindex;
			break;
		}
		else
		{
			DMapsLv[tableindex]=0;
		}
	}
	tableindex=6;
	for(DMapindex=0; DMapindex<512; DMapindex++)
	{
	
		dmapflag1=GetDMapFlag(DMapindex,DMF_SCRIPT1);
		dmapflag2=GetDMapFlag(DMapindex,DMF_SCRIPT2);
		dmapflag3=GetDMapFlag(DMapindex,DMF_SCRIPT3);
		dmapflag4=GetDMapFlag(DMapindex,DMF_SCRIPT4);
		
		SeventhFlr = (dmapflag1 && !dmapflag2 && !dmapflag3 && dmapflag4);
	
		if(Game->DMapLevel[DMapindex]==Level && SeventhFlr) 
		{
			DMapsLv[tableindex]=DMapindex;
			break;
		}
		else
		{
			DMapsLv[tableindex]=0;
		}
	}
	tableindex=7;
	for(DMapindex=0; DMapindex<512; DMapindex++)
	{
	
		dmapflag1=GetDMapFlag(DMapindex,DMF_SCRIPT1);
		dmapflag2=GetDMapFlag(DMapindex,DMF_SCRIPT2);
		dmapflag3=GetDMapFlag(DMapindex,DMF_SCRIPT3);
		dmapflag4=GetDMapFlag(DMapindex,DMF_SCRIPT4);
		
		EighthFlr = (dmapflag1 && dmapflag2 && dmapflag3 && !dmapflag4); 
	
		if(Game->DMapLevel[DMapindex]==Level && EighthFlr) 
		{
			DMapsLv[tableindex]=DMapindex;
			break;
		}
		else
		{
			DMapsLv[tableindex]=0;
		}
	}
	
	//now check the states of each screen on each map for the selected DMaps
	
	for(Screenindex=0; Screenindex<128; Screenindex++)
	{
		Flr1Screens[Screenindex]=Game->GetScreenState(Game->DMapMap[DMapsLv[0]], DMapToMap(Screenindex,DMapsLv[0]), ST_VISITED); 
		Flr2Screens[Screenindex]=Game->GetScreenState(Game->DMapMap[DMapsLv[1]], DMapToMap(Screenindex,DMapsLv[1]), ST_VISITED);
		Flr3Screens[Screenindex]=Game->GetScreenState(Game->DMapMap[DMapsLv[2]], DMapToMap(Screenindex,DMapsLv[2]), ST_VISITED);
		Flr4Screens[Screenindex]=Game->GetScreenState(Game->DMapMap[DMapsLv[3]], DMapToMap(Screenindex,DMapsLv[3]), ST_VISITED);
		Flr5Screens[Screenindex]=Game->GetScreenState(Game->DMapMap[DMapsLv[4]], DMapToMap(Screenindex,DMapsLv[4]), ST_VISITED);
		Flr6Screens[Screenindex]=Game->GetScreenState(Game->DMapMap[DMapsLv[5]], DMapToMap(Screenindex,DMapsLv[5]), ST_VISITED);
		Flr7Screens[Screenindex]=Game->GetScreenState(Game->DMapMap[DMapsLv[6]], DMapToMap(Screenindex,DMapsLv[6]), ST_VISITED);
		Flr8Screens[Screenindex]=Game->GetScreenState(Game->DMapMap[DMapsLv[7]], DMapToMap(Screenindex,DMapsLv[7]), ST_VISITED);

		if((Game->GetScreenFlags(Game->DMapMap[DMapsLv[0]], DMapToMap(Screenindex,DMapsLv[0]), SF_MISC)&64)==64&&(!(Game->GetScreenState(Game->DMapMap[DMapsLv[0]], DMapToMap(Screenindex,DMapsLv[0]), ST_CHEST)))) Flr1Chests[Screenindex]=true;
		else Flr1Chests[Screenindex]=false;
		if((Game->GetScreenFlags(Game->DMapMap[DMapsLv[1]], DMapToMap(Screenindex,DMapsLv[1]), SF_MISC)&64)==64&&(!(Game->GetScreenState(Game->DMapMap[DMapsLv[1]], DMapToMap(Screenindex,DMapsLv[1]), ST_CHEST)))) Flr2Chests[Screenindex]=true;
		else Flr2Chests[Screenindex]=false;
		if((Game->GetScreenFlags(Game->DMapMap[DMapsLv[2]], DMapToMap(Screenindex,DMapsLv[2]), SF_MISC)&64)==64&&(!(Game->GetScreenState(Game->DMapMap[DMapsLv[2]], DMapToMap(Screenindex,DMapsLv[2]), ST_CHEST)))) Flr3Chests[Screenindex]=true;
		else Flr3Chests[Screenindex]=false;
		if((Game->GetScreenFlags(Game->DMapMap[DMapsLv[3]], DMapToMap(Screenindex,DMapsLv[3]), SF_MISC)&64)==64&&(!(Game->GetScreenState(Game->DMapMap[DMapsLv[3]], DMapToMap(Screenindex,DMapsLv[3]), ST_CHEST)))) Flr4Chests[Screenindex]=true;
		else Flr4Chests[Screenindex]=false;
		if((Game->GetScreenFlags(Game->DMapMap[DMapsLv[4]], DMapToMap(Screenindex,DMapsLv[4]), SF_MISC)&64)==64&&(!(Game->GetScreenState(Game->DMapMap[DMapsLv[4]], DMapToMap(Screenindex,DMapsLv[4]), ST_CHEST)))) Flr5Chests[Screenindex]=true;
		else Flr5Chests[Screenindex]=false;
		if((Game->GetScreenFlags(Game->DMapMap[DMapsLv[5]], DMapToMap(Screenindex,DMapsLv[5]), SF_MISC)&64)==64&&(!(Game->GetScreenState(Game->DMapMap[DMapsLv[5]], DMapToMap(Screenindex,DMapsLv[5]), ST_CHEST)))) Flr6Chests[Screenindex]=true;
		else Flr6Chests[Screenindex]=false;
		if((Game->GetScreenFlags(Game->DMapMap[DMapsLv[6]], DMapToMap(Screenindex,DMapsLv[6]), SF_MISC)&64)==64&&(!(Game->GetScreenState(Game->DMapMap[DMapsLv[6]], DMapToMap(Screenindex,DMapsLv[6]), ST_CHEST)))) Flr7Chests[Screenindex]=true;
		else Flr7Chests[Screenindex]=false;
		if((Game->GetScreenFlags(Game->DMapMap[DMapsLv[7]], DMapToMap(Screenindex,DMapsLv[7]), SF_MISC)&64)==64&&(!(Game->GetScreenState(Game->DMapMap[DMapsLv[7]], DMapToMap(Screenindex,DMapsLv[7]), ST_CHEST)))) Flr8Chests[Screenindex]=true;		
		else Flr8Chests[Screenindex]=false;
		
		if(Game->GetDMapScreenD(DMapsLv[0], Screenindex, 0)==1) Flr1Marks[Screenindex]=true;
		else Flr1Marks[Screenindex]=false;
		if(Game->GetDMapScreenD(DMapsLv[1], Screenindex, 0)==1) Flr2Marks[Screenindex]=true;
		else Flr2Marks[Screenindex]=false;
		if(Game->GetDMapScreenD(DMapsLv[2], Screenindex, 0)==1) Flr3Marks[Screenindex]=true;
		else Flr3Marks[Screenindex]=false;
		if(Game->GetDMapScreenD(DMapsLv[3], Screenindex, 0)==1) Flr4Marks[Screenindex]=true;
		else Flr4Marks[Screenindex]=false;
		if(Game->GetDMapScreenD(DMapsLv[4], Screenindex, 0)==1) Flr5Marks[Screenindex]=true;
		else Flr5Marks[Screenindex]=false;
		if(Game->GetDMapScreenD(DMapsLv[5], Screenindex, 0)==1) Flr6Marks[Screenindex]=true;
		else Flr6Marks[Screenindex]=false;
		if(Game->GetDMapScreenD(DMapsLv[6], Screenindex, 0)==1) Flr7Marks[Screenindex]=true;
		else Flr7Marks[Screenindex]=false;
		if(Game->GetDMapScreenD(DMapsLv[7], Screenindex, 0)==1) Flr8Marks[Screenindex]=true;
		else Flr8Marks[Screenindex]=false;
		
	}

//Check for boss location and status	
	
	for(Screenindex=0; Screenindex<8; Screenindex++)
	{
		if(!GetDMapFlag(DMapsLv[Screenindex],DMF_NOCOMPASS)) 
		{
		
			dmapflag1=GetDMapFlag(DMapsLv[Screenindex],DMF_SCRIPT1);
			dmapflag2=GetDMapFlag(DMapsLv[Screenindex],DMF_SCRIPT2);
			dmapflag3=GetDMapFlag(DMapsLv[Screenindex],DMF_SCRIPT3);
			dmapflag4=GetDMapFlag(DMapsLv[Screenindex],DMF_SCRIPT4);
			
			FirstFlr = (dmapflag1 && !dmapflag2 && !dmapflag3 && !dmapflag4);
			SecondFlr = (!dmapflag1 && dmapflag2 && !dmapflag3 && !dmapflag4);
			ThirdFlr = (!dmapflag1 && !dmapflag2 && dmapflag3 && !dmapflag4);
			FourthFlr = (!dmapflag1 && !dmapflag2 && !dmapflag3 && dmapflag4);
			FifthFlr = (dmapflag1 && dmapflag2 && !dmapflag3 && !dmapflag4);
			SixthFlr = (dmapflag1 && !dmapflag2 && dmapflag3 && !dmapflag4);
			SeventhFlr = (dmapflag1 && !dmapflag2 && !dmapflag3 && dmapflag4);
			EighthFlr = (dmapflag1 && dmapflag2 && dmapflag3 && !dmapflag4);
			
			if(FirstFlr) BossFlr=1;
			else if(SecondFlr) BossFlr=2;
			else if(ThirdFlr) BossFlr=3;
			else if(FourthFlr) BossFlr=4;
			else if(FifthFlr) BossFlr=5;
			else if(SixthFlr) BossFlr=6;
			else if(SeventhFlr) BossFlr=7;
			else if(EighthFlr) BossFlr=8;
			else BossFlr=0;
			
			BossScrn=Game->DMapCompass[DMapsLv[Screenindex]];
			
			BossDead=GetLevelItem(Level, LI_BOSS);		
			

		}	
	}
	return;
}
//End StateList


//---Visited---

bool Visited (int floor, int screen)
{
	//return the visited value based on the floor and screen queried.
	if(floor==1) return !(Flr1Screens[screen]);
	if(floor==2) return !(Flr2Screens[screen]);
	if(floor==3) return !(Flr3Screens[screen]);
	if(floor==4) return !(Flr4Screens[screen]);
	if(floor==5) return !(Flr5Screens[screen]);
	if(floor==6) return !(Flr6Screens[screen]);
	if(floor==7) return !(Flr7Screens[screen]);
	if(floor==8) return !(Flr8Screens[screen]);
}
//End Visited


//---OpenChests---

bool OpenChests (int floor, int screen)
{
	//Return the Treasure Chest status based on the floor and screen queried.
	if(floor==1) return (Flr1Chests[screen]);
	if(floor==2) return (Flr2Chests[screen]);
	if(floor==3) return (Flr3Chests[screen]);
	if(floor==4) return (Flr4Chests[screen]);
	if(floor==5) return (Flr5Chests[screen]);
	if(floor==6) return (Flr6Chests[screen]);
	if(floor==7) return (Flr7Chests[screen]);
	if(floor==8) return (Flr8Chests[screen]);
}
//End OpenChests


//---MapMarks---

bool MapMarks (int floor, int screen)
{
	//Return the map mark status based on the floor and screen queried.
	if(floor==1) return (Flr1Marks[screen]);
	if(floor==2) return (Flr2Marks[screen]);
	if(floor==3) return (Flr3Marks[screen]);
	if(floor==4) return (Flr4Marks[screen]);
	if(floor==5) return (Flr5Marks[screen]);
	if(floor==6) return (Flr6Marks[screen]);
	if(floor==7) return (Flr7Marks[screen]);
	if(floor==8) return (Flr8Marks[screen]);	
}
//End MapMarks


//---BossFloor---

int BossFloor ()
{
	return BossFlr;
}
//End BossFloor


//---BossScreen---

int BossScreen ()
{
	return BossScrn;
}
//End BossScreen


//---BossDead---

bool BossDead ()
{
	return BossDead;
}	
//End BossDead


//---DoorsList---

//Function below controls how the explored room is displayed in dungeons.  Comment out the lines for floors you aren't using, if needed.

void DoorsList(int Level, int DMap, int MScreen)
{
	int temp[4]={0,0,0,0};
	
	bool dmapflag1=GetDMapFlag(DMap,DMF_SCRIPT1);
	bool dmapflag2=GetDMapFlag(DMap,DMF_SCRIPT2);
	bool dmapflag3=GetDMapFlag(DMap,DMF_SCRIPT3);
	bool dmapflag4=GetDMapFlag(DMap,DMF_SCRIPT4);
	
	bool FirstFlr = (dmapflag1 && !dmapflag2 && !dmapflag3 && !dmapflag4); //DMap flags make floor selections    1000
	bool SecondFlr = (!dmapflag1 && dmapflag2 && !dmapflag3 && !dmapflag4); //0100
	bool ThirdFlr = (!dmapflag1 && !dmapflag2 && dmapflag3 && !dmapflag4); //0010
	bool FourthFlr = (!dmapflag1 && !dmapflag2 && !dmapflag3 && dmapflag4); //0001
	bool FifthFlr = (dmapflag1 && dmapflag2 && !dmapflag3 && !dmapflag4); //1100
	bool SixthFlr = (dmapflag1 && !dmapflag2 && dmapflag3 && !dmapflag4); //1010
	bool SeventhFlr = (dmapflag1 && !dmapflag2 && !dmapflag3 && dmapflag4); //1001
	bool EighthFlr = (dmapflag1 && dmapflag2 && dmapflag3 && !dmapflag4); //1110
	
	if(Level==0)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv0Fl1Doors[MScreen]=17;
			 Lv0Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv0Fl2Doors[MScreen]=17;
			 Lv0Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv0Fl3Doors[MScreen]=17;
			 Lv0Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv0Fl4Doors[MScreen]=17;
			 Lv0Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv0Fl5Doors[MScreen]=17;
			 Lv0Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv0Fl6Doors[MScreen]=17;
			 Lv0Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv0Fl7Doors[MScreen]=17;
			 Lv0Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv0Fl8Doors[MScreen]=17;
			 Lv0Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==1)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv1Fl1Doors[MScreen]=17;
			 Lv1Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv1Fl2Doors[MScreen]=17;
			 Lv1Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv1Fl3Doors[MScreen]=17;
			 Lv1Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv1Fl4Doors[MScreen]=17;
			 Lv1Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv1Fl5Doors[MScreen]=17;
			 Lv1Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv1Fl6Doors[MScreen]=17;
			 Lv1Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv1Fl7Doors[MScreen]=17;
			 Lv1Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv1Fl8Doors[MScreen]=17;
			 Lv1Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==2)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv2Fl1Doors[MScreen]=17;
			 Lv2Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv2Fl2Doors[MScreen]=17;
			 Lv2Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv2Fl3Doors[MScreen]=17;
			 Lv2Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv2Fl4Doors[MScreen]=17;
			 Lv2Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv2Fl5Doors[MScreen]=17;
			 Lv2Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv2Fl6Doors[MScreen]=17;
			 Lv2Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv2Fl7Doors[MScreen]=17;
			 Lv2Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv2Fl8Doors[MScreen]=17;
			 Lv2Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==3)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv3Fl1Doors[MScreen]=17;
			 Lv3Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv3Fl2Doors[MScreen]=17;
			 Lv3Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv3Fl3Doors[MScreen]=17;
			 Lv3Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv3Fl4Doors[MScreen]=17;
			 Lv3Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv3Fl5Doors[MScreen]=17;
			 Lv3Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv3Fl6Doors[MScreen]=17;
			 Lv3Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv3Fl7Doors[MScreen]=17;
			 Lv3Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv3Fl8Doors[MScreen]=17;
			 Lv3Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==4)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv4Fl1Doors[MScreen]=17;
			 Lv4Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv4Fl2Doors[MScreen]=17;
			 Lv4Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv4Fl3Doors[MScreen]=17;
			 Lv4Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv4Fl4Doors[MScreen]=17;
			 Lv4Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv4Fl5Doors[MScreen]=17;
			 Lv4Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv4Fl6Doors[MScreen]=17;
			 Lv4Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv4Fl7Doors[MScreen]=17;
			 Lv4Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv4Fl8Doors[MScreen]=17;
			 Lv4Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==5)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv5Fl1Doors[MScreen]=17;
			 Lv5Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv5Fl2Doors[MScreen]=17;
			 Lv5Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv5Fl3Doors[MScreen]=17;
			 Lv5Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv5Fl4Doors[MScreen]=17;
			 Lv5Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv5Fl5Doors[MScreen]=17;
			 Lv5Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv5Fl6Doors[MScreen]=17;
			 Lv5Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv5Fl7Doors[MScreen]=17;
			 Lv5Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv5Fl8Doors[MScreen]=17;
			 Lv5Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==6)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv6Fl1Doors[MScreen]=17;
			 Lv6Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv6Fl2Doors[MScreen]=17;
			 Lv6Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv6Fl3Doors[MScreen]=17;
			 Lv6Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv6Fl4Doors[MScreen]=17;
			 Lv6Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv6Fl5Doors[MScreen]=17;
			 Lv6Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv6Fl6Doors[MScreen]=17;
			 Lv6Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv6Fl7Doors[MScreen]=17;
			 Lv6Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv6Fl8Doors[MScreen]=17;
			 Lv6Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==7)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv7Fl1Doors[MScreen]=17;
			 Lv7Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv7Fl2Doors[MScreen]=17;
			 Lv7Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv7Fl3Doors[MScreen]=17;
			 Lv7Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv7Fl4Doors[MScreen]=17;
			 Lv7Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv7Fl5Doors[MScreen]=17;
			 Lv7Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv7Fl6Doors[MScreen]=17;
			 Lv7Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv7Fl7Doors[MScreen]=17;
			 Lv7Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv7Fl8Doors[MScreen]=17;
			 Lv7Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==8)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv8Fl1Doors[MScreen]=17;
			 Lv8Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv8Fl2Doors[MScreen]=17;
			 Lv8Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv8Fl3Doors[MScreen]=17;
			 Lv8Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv8Fl4Doors[MScreen]=17;
			 Lv8Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv8Fl5Doors[MScreen]=17;
			 Lv8Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv8Fl6Doors[MScreen]=17;
			 Lv8Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv8Fl7Doors[MScreen]=17;
			 Lv8Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv8Fl8Doors[MScreen]=17;
			 Lv8Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==9)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv9Fl1Doors[MScreen]=17;
			 Lv9Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv9Fl2Doors[MScreen]=17;
			 Lv9Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv9Fl3Doors[MScreen]=17;
			 Lv9Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv9Fl4Doors[MScreen]=17;
			 Lv9Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv9Fl5Doors[MScreen]=17;
			 Lv9Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv9Fl6Doors[MScreen]=17;
			 Lv9Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv9Fl7Doors[MScreen]=17;
			 Lv9Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv9Fl8Doors[MScreen]=17;
			 Lv9Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==10)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv10Fl1Doors[MScreen]=17;
			 Lv10Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv10Fl2Doors[MScreen]=17;
			 Lv10Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv10Fl3Doors[MScreen]=17;
			 Lv10Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv10Fl4Doors[MScreen]=17;
			 Lv10Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv10Fl5Doors[MScreen]=17;
			 Lv10Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv10Fl6Doors[MScreen]=17;
			 Lv10Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv10Fl7Doors[MScreen]=17;
			 Lv10Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv10Fl8Doors[MScreen]=17;
			 Lv10Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==11)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv11Fl1Doors[MScreen]=17;
			 Lv11Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv11Fl2Doors[MScreen]=17;
			 Lv11Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv11Fl3Doors[MScreen]=17;
			 Lv11Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv11Fl4Doors[MScreen]=17;
			 Lv11Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv11Fl5Doors[MScreen]=17;
			 Lv11Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv11Fl6Doors[MScreen]=17;
			 Lv11Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv11Fl7Doors[MScreen]=17;
			 Lv11Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv11Fl8Doors[MScreen]=17;
			 Lv11Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==12)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv12Fl1Doors[MScreen]=17;
			 Lv12Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv12Fl2Doors[MScreen]=17;
			 Lv12Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv12Fl3Doors[MScreen]=17;
			 Lv12Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv12Fl4Doors[MScreen]=17;
			 Lv12Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv12Fl5Doors[MScreen]=17;
			 Lv12Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv12Fl6Doors[MScreen]=17;
			 Lv12Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv12Fl7Doors[MScreen]=17;
			 Lv12Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv12Fl8Doors[MScreen]=17;
			 Lv12Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==13)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv13Fl1Doors[MScreen]=17;
			 Lv13Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv13Fl2Doors[MScreen]=17;
			 Lv13Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv13Fl3Doors[MScreen]=17;
			 Lv13Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv13Fl4Doors[MScreen]=17;
			 Lv13Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv13Fl5Doors[MScreen]=17;
			 Lv13Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv13Fl6Doors[MScreen]=17;
			 Lv13Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv13Fl7Doors[MScreen]=17;
			 Lv13Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv13Fl8Doors[MScreen]=17;
			 Lv13Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==14)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv14Fl1Doors[MScreen]=17;
			 Lv14Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv14Fl2Doors[MScreen]=17;
			 Lv14Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv14Fl3Doors[MScreen]=17;
			 Lv14Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv14Fl4Doors[MScreen]=17;
			 Lv14Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv14Fl5Doors[MScreen]=17;
			 Lv14Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv14Fl6Doors[MScreen]=17;
			 Lv14Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv14Fl7Doors[MScreen]=17;
			 Lv14Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv14Fl8Doors[MScreen]=17;
			 Lv14Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	if(Level==15)
	{
		if(FirstFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv15Fl1Doors[MScreen]=17;
			 Lv15Fl1Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SecondFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv15Fl2Doors[MScreen]=17;
			 Lv15Fl2Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(ThirdFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv15Fl3Doors[MScreen]=17;
			 Lv15Fl3Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FourthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv15Fl4Doors[MScreen]=17;
			 Lv15Fl4Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(FifthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv15Fl5Doors[MScreen]=17;
			 Lv15Fl5Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SixthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv15Fl6Doors[MScreen]=17;
			 Lv15Fl6Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(SeventhFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv15Fl7Doors[MScreen]=17;
			 Lv15Fl7Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
		if(EighthFlr)
		{
			if(Screen->Door[DIR_UP]==D_OPEN||Screen->Door[DIR_UP]==D_LOCKED||Screen->Door[DIR_UP]==D_BOSSLOCKED) temp[0]=4;
			if(Screen->Door[DIR_DOWN]==D_OPEN||Screen->Door[DIR_DOWN]==D_LOCKED||Screen->Door[DIR_DOWN]==D_BOSSLOCKED) temp[1]=1;
			if(Screen->Door[DIR_LEFT]==D_OPEN||Screen->Door[DIR_LEFT]==D_LOCKED||Screen->Door[DIR_LEFT]==D_BOSSLOCKED) temp[2]=2;
			if(Screen->Door[DIR_RIGHT]==D_OPEN||Screen->Door[DIR_RIGHT]==D_LOCKED||Screen->Door[DIR_RIGHT]==D_BOSSLOCKED) temp[3]=8;
			
			// Lv15Fl8Doors[MScreen]=17;
			 Lv15Fl8Doors[MScreen]=temp[0]+temp[1]+temp[2]+temp[3];
			
			return;
		}
	}
	return;
}
//End DoorsList


//---DoorsLookup---

//This function will return the door adjustment for the specified screen. You can comment out the sections for Floors or Levels you won't use.

int DoorsLookup (int Level, int MScreen, int Floor)
{
	if(Level==0)
	{
		if(Floor==1)
		{
			return Lv0Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv0Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv0Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv0Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv0Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv0Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv0Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv0Fl8Doors[MScreen];
		}
	}
	if(Level==1)
	{
		if(Floor==1)
		{
			return Lv1Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv1Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv1Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv1Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv1Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv1Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv1Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv1Fl8Doors[MScreen];
		}
	}
	if(Level==2)
	{
		if(Floor==1)
		{
			return Lv2Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv2Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv2Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv2Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv2Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv2Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv2Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv2Fl8Doors[MScreen];
		}
	}
	if(Level==3)
	{
		if(Floor==1)
		{
			return Lv3Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv3Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv3Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv3Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv3Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv3Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv3Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv3Fl8Doors[MScreen];
		}
	}
	if(Level==4)
	{
		if(Floor==1)
		{
			return Lv4Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv4Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv4Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv4Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv4Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv4Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv4Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv4Fl8Doors[MScreen];
		}
	}
	if(Level==5)
	{
		if(Floor==1)
		{
			return Lv5Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv5Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv5Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv5Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv5Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv5Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv5Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv5Fl8Doors[MScreen];
		}
	}
	if(Level==6)
	{
		if(Floor==1)
		{
			return Lv6Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv6Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv6Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv6Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv6Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv6Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv6Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv6Fl8Doors[MScreen];
		}
	}
	if(Level==7)
	{
		if(Floor==1)
		{
			return Lv7Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv7Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv7Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv7Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv7Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv7Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv7Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv7Fl8Doors[MScreen];
		}
	}
	if(Level==8)
	{
		if(Floor==1)
		{
			return Lv8Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv8Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv8Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv8Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv8Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv8Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv8Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv8Fl8Doors[MScreen];
		}
	}
	if(Level==9)
	{
		if(Floor==1)
		{
			return Lv9Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv9Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv9Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv9Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv9Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv9Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv9Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv9Fl8Doors[MScreen];
		}
	}
	if(Level==10)
	{
		if(Floor==1)
		{
			return Lv10Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv10Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv10Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv10Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv10Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv10Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv10Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv10Fl8Doors[MScreen];
		}
	}
	if(Level==11)
	{
		if(Floor==1)
		{
			return Lv11Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv11Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv11Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv11Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv11Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv11Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv11Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv11Fl8Doors[MScreen];
		}
	}
	if(Level==12)
	{
		if(Floor==1)
		{
			return Lv12Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv12Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv12Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv12Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv12Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv12Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv12Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv12Fl8Doors[MScreen];
		}
	}
	if(Level==13)
	{
		if(Floor==1)
		{
			return Lv13Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv13Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv13Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv13Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv13Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv13Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv13Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv13Fl8Doors[MScreen];
		}
	}
	if(Level==14)
	{
		if(Floor==1)
		{
			return Lv14Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv14Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv14Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv14Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv14Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv14Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv14Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv14Fl8Doors[MScreen];
		}
	}
	if(Level==15)
	{
		if(Floor==1)
		{
			return Lv15Fl1Doors[MScreen];
		}
		if(Floor==2)
		{
			return Lv15Fl2Doors[MScreen];
		}
		if(Floor==3)
		{
			return Lv15Fl3Doors[MScreen];
		}
		if(Floor==4)
		{
			return Lv15Fl4Doors[MScreen];
		}
		if(Floor==5)
		{
			return Lv15Fl5Doors[MScreen];
		}
		if(Floor==6)
		{
			return Lv15Fl6Doors[MScreen];
		}
		if(Floor==7)
		{
			return Lv15Fl7Doors[MScreen];
		}
		if(Floor==8)
		{
			return Lv15Fl8Doors[MScreen];
		}
	}
	return NULL;
}
//End DoorsLookup

//---End Functions---

//---See the Manual and Quest Example for complete setup instructions---