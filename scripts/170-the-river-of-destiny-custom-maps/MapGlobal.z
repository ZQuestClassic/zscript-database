//FlounderMAJ Custom Map Global and FFC Scripts

//---See the Manual and Quest Example for complete setup instructions---

//Import this into the ZQuest buffer along with MapHeader.zh and std.zh

//---Global---
//This is the main global script for displaying maps.  It sets up all the variables and calls the functions needed.
//Add other code for your global script where indicated.

global script MapGlobal
{

	void run()
	{	
		int CurrentDMap;			
		int CurrentLevel;
		int CurrentDMapScreen;
		int CurrentScreen;
		bool LMap;
		bool LCompass;
		bool BKey;
		
       	if(Game->HasPlayed == false)  
		//If this is the first time the game is run, the functions below in brackets are called.
		{
			InitializeSList();
		}
	
		while (true)  //Main While loop start
		{
 			if (Link->PressMap)
			{
				CurrentLevel=Game->GetCurLevel();  //Calculate variables for custom map
				CurrentDMap=Game->GetCurDMap();
				CurrentDMapScreen=Game->GetCurDMapScreen();
				CurrentScreen=Game->GetCurScreen();
				BKey=GetLevelItem(CurrentLevel, LI_BOSSKEY);
				LMap=GetLevelItem(CurrentLevel, LI_MAP);
				LCompass=GetLevelItem(CurrentLevel, LI_COMPASS);		
				
				StateList(CurrentLevel);   //Build Lookup Tables
				
				Map(CurrentLevel, CurrentDMap, CurrentDMapScreen, CurrentScreen, LMap, LCompass, BKey);  //Displays custom map
				
				Waitframes(60);  //Wait before allowing map to be opened again.
			}

			if(Game->GetCurScreen()<128)
			{
				if(Screen->State[ST_VISITED]==false){ Screen->State[ST_VISITED]=true;  //Set visited state and door configuration on every screen entered
				DoorsList(Game->GetCurLevel(), Game->GetCurDMap(), Game->GetCurScreen());}
			}
			
			//----Add other code here----
			
			Waitdraw();
			Waitframe();
		}
	}
}	

//---FFCs---
//The following FFC Scripts are used to create or remove marks on the maps.  Place SetMarks on a screen Where you want up to 6 marks to be set.
//Place UnsetMarks on a screen you will enter after obtaining an item that will unset the mark, such as a Triforce fragment. 
//Place BossNoReturn on a boss screen if the boss you are using doesn't set the "Enemy No Return" state for some reason.


//Place this on the screen where you want the marks to be set on the map.  The Script uses the D0 screen register of the screen where the mark
//will be set.  Up to 6 marks can be set at one time.  

//Script Variables
//D0: The Dmap where the screens to be marked reside.
//D1-D6: The screens to be marked.  If unused, set to -1.
//D7: This is the iteration of this script.  If more than 6 marks are needed, or more marks are to be set later, increment this. This prevents an
     //iteration of this script from running more than once.  Must be at least 1.
ffc script SetMarks
{
	void run (int dmap, int s0, int s1, int s2, int s3, int s4, int s5, int setmarks)
	{
		int Sarray[6]={s0,s1,s2,s3,s4,s5};
		int i;
		while (setmarksbeenrun<setmarks-1)
		{
			Waitframe();
		}
		if (setmarksbeenrun==setmarks-1) 
		{
			for (i=0; i<6; i++)
			{
				if (Sarray[i]>-1) Game->SetDMapScreenD(dmap, Sarray[i], 0, 1);
				Waitframe();
			}
			setmarksbeenrun++;
			Quit();
		}
		else Quit();
	}
}

//Place this on a screen where you want a single mark to be unset, such as the screen you warp to after finishing a dungeon.
//Marks can be unset by obtaining a certain item, like a sword, or by obtaining a certain level's specific item. 

//Script Variables
//D0: The item that unsets the mark. If unused, set to -1.
//D1: The DMap of the marked screen.
//D2: The screen to be unmarked.
//D3: The Level for which the level item specified must be obtained to unset the mark. If unused, set to -1.  
		//If using Triforce and anything other than the 8 normal triforce pieces, this may work strangely.
//D4: The Level item that must be obtained.  Check the LI_ constants in 'std.zh' for values. If unused, set to 0.

ffc script UnsetMarks
{
	void run (int item0, int dmap0, int screen0, int level0, int LevelItem0)
	{
		while(Game->GetDMapScreenD(dmap0, screen0, 0)==1)
		{
			if (item0>=0&&Link->Item[item0]) {Game->SetDMapScreenD(dmap0, screen0, 0, 0); setmarksbeenrun++;}
			else if (level0>=0&&GetLevelItem(level0, LevelItem0)) {Game->SetDMapScreenD(dmap0, screen0, 0, 0); setmarksbeenrun++;}
			else Quit();
			Waitframe();
		}
		Quit();
	}
}


//---See the Manual and Quest Example for complete setup instructions---